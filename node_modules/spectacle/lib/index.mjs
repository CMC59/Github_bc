var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// src/components/deck/index.tsx
import { Fragment as Fragment3 } from "react";

// src/components/deck/default-deck.tsx
import { useRef as useRef4, useCallback as useCallback5, useEffect as useEffect8 } from "react";

// src/components/deck/deck.tsx
import {
  useState as useState4,
  useEffect as useEffect6,
  forwardRef,
  useMemo as useMemo2,
  useCallback as useCallback3,
  createContext,
  useImperativeHandle,
  useId as useId2
} from "react";
import styled2, { ThemeProvider } from "styled-components";

// src/hooks/use-slides.tsx
import { useState, useEffect, useId } from "react";
import { jsx } from "react/jsx-runtime";
var PLACEHOLDER_CLASS_NAME = "spectacle-v7-slide";
function useCollectSlides() {
  const [initialized, setInitialized] = useState(false);
  const [slideContainer, setSlideContainer] = useState();
  const [slideIds, setSlideIds] = useState([]);
  const [slideIdsOfSlidesWithTemplates, setSlideIdsOfSlidesWithTemplates] = useState(/* @__PURE__ */ new Set());
  useEffect(() => {
    if (!slideContainer)
      return;
    const slides = slideContainer.getElementsByClassName(
      PLACEHOLDER_CLASS_NAME
    );
    const nextSlideIds = [];
    const nextSlideIdsOfSlidesWithTemplates = /* @__PURE__ */ new Set();
    for (const placeholderNode of slides) {
      const { slideId, slideHasTemplate } = placeholderNode.dataset;
      if (slideId !== void 0) {
        nextSlideIds.push(slideId);
        if (slideHasTemplate === "true") {
          nextSlideIdsOfSlidesWithTemplates.add(slideId);
        }
      }
    }
    setSlideIds(nextSlideIds);
    setSlideIdsOfSlidesWithTemplates(nextSlideIdsOfSlidesWithTemplates);
    setInitialized(true);
  }, [slideContainer]);
  return [
    setSlideContainer,
    slideIds,
    slideIdsOfSlidesWithTemplates,
    initialized
  ];
}
function useSlide(doesSlideHaveTemplate, userProvidedId) {
  const id = useId();
  const [slideId] = useState(userProvidedId || id);
  return {
    slideId,
    placeholder: /* @__PURE__ */ jsx(
      "div",
      {
        className: PLACEHOLDER_CLASS_NAME,
        "data-slide-id": slideId,
        "data-slide-has-template": doesSlideHaveTemplate
      }
    )
  };
}

// src/hooks/use-aspect-ratio-fitting.ts
import { useRef, useState as useState2, useCallback, useEffect as useEffect2 } from "react";
import useResizeObserver from "use-resize-observer";
function useAspectRatioFitting({
  targetWidth = 1366,
  targetHeight = 768
}) {
  const containerRef = useRef(null);
  const [scaleFactor, setScaleFactor] = useState2(1);
  const [transformOrigin, setTransformOrigin] = useState2({ x: 0, y: 0 });
  const recalculate = useCallback(
    ({ width, height }) => {
      const containerWidth = Number(width) || 0.01;
      const containerHeight = Number(height) || 0.01;
      const containerRatio = containerWidth / containerHeight;
      const targetRatio = targetWidth / targetHeight;
      const useVertical = containerRatio > targetRatio;
      const scaleFactor2 = useVertical ? containerHeight / targetHeight : containerWidth / targetWidth;
      const scaledWidth = targetWidth * scaleFactor2;
      const scaledHeight = targetHeight * scaleFactor2;
      let x0 = 0;
      if (useVertical) {
        x0 = 0.5 * (containerWidth - scaledWidth);
        x0 /= 1 - scaleFactor2;
      }
      let y0 = 0;
      if (!useVertical) {
        y0 = 0.5 * (containerHeight - scaledHeight);
        y0 /= 1 - scaleFactor2;
      }
      setScaleFactor(scaleFactor2);
      setTransformOrigin({ x: x0, y: y0 });
    },
    [targetWidth, targetHeight]
  );
  useEffect2(() => {
    if (!containerRef || !containerRef.current)
      return;
    const rects = containerRef.current.getClientRects();
    recalculate(rects[0]);
  }, [targetWidth, targetHeight, recalculate]);
  useResizeObserver({
    ref: containerRef,
    onResize: recalculate
  });
  const styles = {
    position: "relative",
    width: targetWidth,
    height: targetHeight,
    scaleFactor,
    transform: `scale(${scaleFactor})`,
    transformOrigin: `${transformOrigin.x}px ${transformOrigin.y}px`
  };
  return [containerRef, styles];
}

// src/hooks/use-deck-state.ts
import { useReducer, useMemo } from "react";
import { merge } from "merge-anything";

// src/utils/clamp.ts
function toFiniteNumber(value) {
  if (!value || isNaN(value)) {
    return 0;
  } else if (value === Infinity || value === -Infinity) {
    const sign = value < 0 ? -1 : 1;
    return sign * Number.MAX_SAFE_INTEGER;
  }
  return value;
}
function clamp(number, lower, upper) {
  if (isNaN(number)) {
    return NaN;
  }
  let finiteNumber = toFiniteNumber(number);
  if (finiteNumber === finiteNumber) {
    if (upper !== void 0) {
      finiteNumber = finiteNumber <= upper ? finiteNumber : upper;
    }
    if (lower !== void 0) {
      finiteNumber = finiteNumber >= lower ? finiteNumber : lower;
    }
  }
  return finiteNumber;
}

// src/hooks/use-deck-state.ts
var GOTO_FINAL_STEP = null;
var initialDeckState = {
  initialized: false,
  navigationDirection: 0,
  pendingView: {
    slideIndex: 0,
    stepIndex: 0
  },
  activeView: {
    slideIndex: 0,
    stepIndex: 0
  }
};
function deckReducer(state, { type, payload = {} }) {
  var _a;
  switch (type) {
    case "INITIALIZE_TO":
      return {
        navigationDirection: 0,
        activeView: merge(state.activeView, payload),
        pendingView: merge(state.pendingView, payload),
        initialized: true
      };
    case "SKIP_TO":
      const navigationDirection = (() => {
        if ("slideIndex" in payload && payload.slideIndex) {
          return clamp(payload.slideIndex - state.activeView.slideIndex, -1, 1);
        }
        return null;
      })();
      return __spreadProps(__spreadValues({}, state), {
        navigationDirection: navigationDirection || state.navigationDirection,
        pendingView: merge(state.pendingView, payload)
      });
    case "STEP_FORWARD":
      return __spreadProps(__spreadValues({}, state), {
        navigationDirection: 1,
        pendingView: merge(state.pendingView, {
          stepIndex: state.pendingView.stepIndex + 1
        })
      });
    case "STEP_BACKWARD":
      return __spreadProps(__spreadValues({}, state), {
        navigationDirection: -1,
        pendingView: merge(state.pendingView, {
          stepIndex: state.pendingView.stepIndex - 1
        })
      });
    case "ADVANCE_SLIDE":
      return __spreadProps(__spreadValues({}, state), {
        navigationDirection: 1,
        pendingView: merge(state.pendingView, {
          stepIndex: 0,
          slideIndex: state.pendingView.slideIndex + 1
        })
      });
    case "REGRESS_SLIDE":
      return __spreadProps(__spreadValues({}, state), {
        navigationDirection: -1,
        pendingView: merge(state.pendingView, {
          stepIndex: (_a = payload == null ? void 0 : payload.stepIndex) != null ? _a : GOTO_FINAL_STEP,
          slideIndex: state.pendingView.slideIndex - 1
        })
      });
    case "COMMIT_TRANSITION":
      const pendingView = merge(state.pendingView, payload);
      return __spreadProps(__spreadValues({}, state), {
        pendingView,
        activeView: merge(state.activeView, pendingView)
      });
    case "CANCEL_TRANSITION":
      return __spreadProps(__spreadValues({}, state), {
        pendingView: merge(state.pendingView, state.activeView)
      });
    default:
      return state;
  }
}
function useDeckState(userProvidedInitialState) {
  const [
    { initialized, navigationDirection, pendingView, activeView },
    dispatch
  ] = useReducer(deckReducer, {
    initialized: initialDeckState.initialized,
    navigationDirection: initialDeckState.navigationDirection,
    pendingView: __spreadValues(__spreadValues({}, initialDeckState.pendingView), userProvidedInitialState),
    activeView: __spreadValues(__spreadValues({}, initialDeckState.activeView), userProvidedInitialState)
  });
  const actions = useMemo(
    () => ({
      initializeTo: (payload) => dispatch({ type: "INITIALIZE_TO", payload }),
      skipTo: (payload) => dispatch({ type: "SKIP_TO", payload }),
      stepForward: () => dispatch({ type: "STEP_FORWARD" }),
      stepBackward: () => dispatch({ type: "STEP_BACKWARD" }),
      advanceSlide: () => dispatch({ type: "ADVANCE_SLIDE" }),
      regressSlide: (payload) => dispatch({ type: "REGRESS_SLIDE", payload }),
      commitTransition: (payload) => dispatch({ type: "COMMIT_TRANSITION", payload }),
      cancelTransition: () => dispatch({ type: "CANCEL_TRANSITION" })
    }),
    [dispatch]
  );
  return __spreadValues({
    initialized,
    navigationDirection,
    pendingView,
    activeView
  }, actions);
}

// src/hooks/use-mousetrap.ts
import { useEffect as useEffect3 } from "react";
import Mousetrap from "mousetrap";
function useMousetrap(keybinds, deps) {
  useEffect3(() => {
    for (const combo in keybinds) {
      const callback = keybinds[combo];
      if (typeof callback !== "function") {
        throw new TypeError(
          `Expected type 'function' in useMousetrap for combo '${combo}', but got ${typeof callback}`
        );
      }
      Mousetrap.bind(combo, callback);
    }
    return () => {
      for (const combo in keybinds) {
        Mousetrap.unbind(combo);
      }
    };
  }, [keybinds, ...deps]);
}

// src/hooks/use-location-sync.ts
import { useState as useState3, useEffect as useEffect4, useCallback as useCallback2 } from "react";
import { createBrowserHistory } from "history";
import QS from "query-string";
import isEqual from "react-fast-compare";
import { mergeAndCompare, merge as merge2 } from "merge-anything";
function defaultMergeLocation(object, ...sources) {
  return mergeAndCompare(
    (left, right, key) => {
      switch (key) {
        case "search":
          if (!left)
            return right;
          return "?" + QS.stringify(__spreadValues(__spreadValues({}, QS.parse(left)), QS.parse(right)));
        default:
          return merge2(left, right);
      }
    },
    object,
    ...sources
  );
}
function useLocationSync({
  setState,
  mapStateToLocation: mapStateToLocation2,
  mapLocationToState: mapLocationToState2,
  disableInteractivity = false,
  mergeLocation = defaultMergeLocation,
  historyFactory = createBrowserHistory
}) {
  const [history] = useState3(() => {
    return typeof document !== "undefined" ? historyFactory() : null;
  });
  const [initialized, setInitialized] = useState3(false);
  useEffect4(() => {
    if (!initialized && disableInteractivity)
      return;
    return history == null ? void 0 : history.listen(({ location }) => {
      setState(mapLocationToState2(location));
    });
  }, [
    disableInteractivity,
    initialized,
    history,
    setState,
    mapLocationToState2
  ]);
  const syncLocation = useCallback2(
    (defaultState) => {
      if (disableInteractivity || !history) {
        return defaultState;
      }
      const { location } = history;
      const initialState = merge2(
        defaultState,
        mapLocationToState2(location)
      );
      const nextLocation = mergeLocation(
        {},
        location,
        mapStateToLocation2(initialState)
      );
      history.replace(nextLocation);
      setInitialized(true);
      return initialState;
    },
    [
      history,
      mapLocationToState2,
      mapStateToLocation2,
      disableInteractivity,
      mergeLocation
    ]
  );
  const setLocation = useCallback2(
    (state) => {
      if (!initialized || !history)
        return;
      const { location } = history;
      const nextLocation = mergeLocation(
        {},
        location,
        mapStateToLocation2(state)
      );
      if (!isEqual(location, nextLocation)) {
        history.push(nextLocation);
      }
    },
    [history, initialized, mergeLocation, mapStateToLocation2]
  );
  return [syncLocation, setLocation];
}

// src/theme/default-theme.ts
var defaultTheme = {
  size: {
    width: 1366,
    height: 768,
    maxCodePaneHeight: 200
  },
  colors: {
    primary: "#ebe5da",
    secondary: "#fc6986",
    tertiary: "#1e2852",
    quaternary: "#ffc951",
    quinary: "#8bddfd"
  },
  fonts: {
    header: '"Helvetica Neue", Helvetica, Arial, sans-serif',
    text: '"Helvetica Neue", Helvetica, Arial, sans-serif',
    monospace: '"Consolas", "Menlo", monospace'
  },
  fontSizes: {
    h1: "72px",
    h2: "64px",
    h3: "56px",
    text: "44px",
    monospace: "20px"
  },
  space: [16, 24, 32]
};
var default_theme_default = defaultTheme;

// src/theme/print-theme.ts
var printTheme = {
  colors: {
    primary: "#777",
    secondary: "#000",
    tertiary: "#fff",
    quaternary: "#000000",
    quinary: "#000000"
  }
};
var print_theme_default = printTheme;

// src/theme/index.ts
var mergeKeys = (base, override) => Object.keys(override || {}).reduce(
  (merged, key) => {
    merged[key] = __spreadValues(__spreadValues({}, merged[key]), override[key]);
    return merged;
  },
  __spreadValues({}, base)
);
function mergeTheme({ theme, printMode }) {
  const merged = mergeKeys(default_theme_default, theme);
  return printMode ? mergeKeys(merged, print_theme_default) : merged;
}

// src/location-map-fns/query-string.ts
var query_string_exports = {};
__export(query_string_exports, {
  mapLocationToState: () => mapLocationToState,
  mapStateToLocation: () => mapStateToLocation
});
import {
  parse as parseQS,
  stringify as stringifyQS
} from "query-string";
function mapLocationToState(location) {
  const { search: queryString } = location;
  const { slideIndex: rawSlideIndex, stepIndex: rawStepIndex } = parseQS(queryString);
  const nextState = {};
  if (rawSlideIndex === void 0) {
    return nextState;
  }
  nextState.slideIndex = Number(rawSlideIndex);
  if (isNaN(nextState.slideIndex)) {
    throw new Error(
      `Invalid slide index in URL query string: '${queryString}'`
    );
  }
  if (rawStepIndex === "final") {
    nextState.stepIndex = GOTO_FINAL_STEP;
  } else if (rawStepIndex !== void 0) {
    nextState.stepIndex = Number(rawStepIndex);
    if (isNaN(nextState.stepIndex)) {
      throw new Error(
        `Invalid step index in URL query string: '${queryString}'`
      );
    }
  }
  return nextState;
}
function mapStateToLocation(state) {
  const { slideIndex, stepIndex } = state;
  const query = {};
  if (typeof slideIndex !== "number") {
    return query;
  }
  query.slideIndex = String(slideIndex);
  if (typeof stepIndex === "number") {
    query.stepIndex = String(stepIndex);
  } else if (stepIndex === GOTO_FINAL_STEP) {
    query.stepIndex = "final";
  }
  return {
    search: "?" + stringifyQS(query)
  };
}

// src/components/deck/deck-styles.ts
function overviewFrameStyle({
  overviewScale,
  nativeSlideWidth,
  nativeSlideHeight
}) {
  return {
    margin: "1rem",
    width: `${overviewScale * nativeSlideWidth}px`,
    height: `${overviewScale / (nativeSlideWidth / nativeSlideHeight) * nativeSlideWidth}px`,
    display: "block",
    transform: "none",
    position: "relative"
  };
}
function overviewWrapperStyle({
  overviewScale
}) {
  return {
    width: `${100 / overviewScale}%`,
    height: `${100 / overviewScale}%`,
    transform: `scale(${overviewScale})`,
    transformOrigin: "0px 0px",
    position: "absolute"
  };
}
function printFrameStyle({
  nativeSlideWidth,
  nativeSlideHeight,
  printScale
}) {
  return {
    margin: "0",
    width: `${printScale * nativeSlideWidth}px`,
    height: `${printScale / (nativeSlideWidth / nativeSlideHeight) * nativeSlideWidth}px`,
    display: "block",
    transform: "none",
    position: "relative",
    breakAfter: "page"
  };
}
function printWrapperStyle({
  printScale
}) {
  return {
    width: `${100 / printScale}%`,
    height: `${100 / printScale}%`,
    transform: `scale(${printScale})`,
    transformOrigin: "0px 0px",
    position: "absolute"
  };
}

// src/utils/use-auto-play.ts
import { useEffect as useEffect5, useRef as useRef2 } from "react";
var useAutoPlay = ({
  enabled = false,
  loop = false,
  stepForward,
  interval = 1e3
}) => {
  const stepFn = useRef2(stepForward);
  stepFn.current = stepForward;
  useEffect5(() => {
    if (enabled) {
      const id = setInterval(() => {
        stepFn.current();
      }, interval);
      return () => clearInterval(id);
    }
  }, [enabled, interval, loop]);
};

// src/components/transitions/index.ts
var STAGE_RIGHT = "translateX(-100%)";
var CENTER_STAGE = "translateX(0%)";
var STAGE_LEFT = "translateX(100%)";
var fadeTransition = {
  from: {
    opacity: 0
  },
  enter: {
    opacity: 1
  },
  leave: {
    opacity: 0
  }
};
var slideTransition = {
  from: {
    transform: STAGE_LEFT
  },
  enter: {
    transform: CENTER_STAGE
  },
  leave: {
    transform: STAGE_RIGHT
  }
};
var defaultTransition = slideTransition;

// src/components/template-wrapper.tsx
import styled from "styled-components";
var TemplateWrapper = styled.div`
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  pointer-events: none;
`;
var template_wrapper_default = TemplateWrapper;

// src/components/deck/deck.tsx
import { useRegisterActions } from "kbar";

// src/utils/constants.ts
var SYSTEM_FONT = '-apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Helvetica Neue", Helvetica, sans-serif';
var KEYBOARD_SHORTCUTS = {
  DEFAULT_MODE: "mod+shift+d",
  PRESENTER_MODE: "mod+shift+p",
  OVERVIEW_MODE: "mod+shift+o",
  PRINT_MODE: "mod+shift+r",
  EXPORT_MODE: "mod+shift+e",
  TAB_FORWARD_OVERVIEW_MODE: "tab",
  TAB_BACKWARD_OVERVIEW_MODE: "shift+tab",
  SELECT_SLIDE_OVERVIEW_MODE: "enter",
  NEXT_SLIDE: "right",
  PREVIOUS_SLIDE: "left"
};
var KEYBOARD_SHORTCUTS_IDS = {
  DEFAULT_MODE: "DEFAULT_MODE",
  PRESENTER_MODE: "PRESENTER_MODE",
  OVERVIEW_MODE: "OVERVIEW_MODE",
  PRINT_MODE: "PRINT_MODE",
  EXPORT_MODE: "EXPORT_MODE",
  TAB_FORWARD_OVERVIEW_MODE: "TAB_FORWARD_OVERVIEW_MODE",
  TAB_BACKWARD_OVERVIEW_MODE: "TAB_BACKWARD_OVERVIEW_MODE",
  SELECT_SLIDE_OVERVIEW_MODE: "SELECT_SLIDE_OVERVIEW_MODE",
  NEXT_SLIDE: "NEXT_SLIDE",
  PREVIOUS_SLIDE: "PREVIOUS_SLIDE"
};
var SPECTACLE_MODES = {
  DEFAULT_MODE: "DEFAULT_MODE",
  PRESENTER_MODE: "PRESENTER_MODE",
  OVERVIEW_MODE: "OVERVIEW_MODE",
  PRINT_MODE: "PRINT_MODE",
  EXPORT_MODE: "EXPORT_MODE"
};

// src/components/deck/deck.tsx
import { jsx as jsx2, jsxs } from "react/jsx-runtime";
var DeckContext = createContext(null);
DeckContext.displayName = "DeckContext";
var noop = () => {
};
var DEFAULT_PRINT_SCALE = 1;
var DEFAULT_OVERVIEW_SCALE = 0.25;
var Portal = styled2.div(
  ({ fitAspectRatioStyle, overviewMode, printMode }) => [
    !printMode && { overflow: "hidden" },
    !printMode && fitAspectRatioStyle,
    overviewMode && {
      display: "flex",
      flexWrap: "wrap",
      justifyContent: "flex-start",
      alignItems: "flex-start",
      alignContent: "flex-start",
      transform: "scale(1)",
      overflowY: "scroll",
      width: "100%",
      height: "100%"
    },
    printMode && {
      display: "block"
    }
  ]
);
var DeckInternal = forwardRef(
  (_a, ref) => {
    var _b = _a, {
      id: userProvidedId,
      className = "",
      backdropStyle: userProvidedBackdropStyle,
      overviewMode = false,
      printMode = false,
      exportMode = false,
      overviewScale = DEFAULT_OVERVIEW_SCALE,
      printScale = DEFAULT_PRINT_SCALE,
      template,
      theme: _c = {}
    } = _b, _d = _c, {
      Backdrop: UserProvidedBackdropComponent,
      backdropStyle: themeProvidedBackdropStyle = {
        position: "fixed",
        top: 0,
        left: 0,
        width: "100vw",
        height: "100vh"
      },
      suppressBackdropFallback: themeSuppressBackdropFallback
    } = _d, restTheme = __objRest(_d, [
      "Backdrop",
      "backdropStyle",
      "suppressBackdropFallback"
    ]), {
      onSlideClick = noop,
      onMobileSlide = noop,
      disableInteractivity = false,
      notePortalNode,
      useAnimations = true,
      children,
      onActiveStateChange: onActiveStateChangeExternal = noop,
      initialState: initialDeckState2 = {
        slideIndex: 0,
        stepIndex: 0
      },
      suppressBackdropFallback = false,
      autoPlay = false,
      autoPlayLoop = false,
      autoPlayInterval = 1e3,
      transition = defaultTransition,
      backgroundImage
    } = _b;
    const id = useId2();
    const [deckId] = useState4(userProvidedId || id);
    const {
      width: nativeSlideWidth = default_theme_default.size.width,
      height: nativeSlideHeight = default_theme_default.size.height
    } = restTheme.size || {};
    const {
      initialized,
      pendingView,
      activeView,
      navigationDirection,
      initializeTo,
      skipTo,
      stepForward,
      stepBackward,
      advanceSlide,
      regressSlide,
      commitTransition,
      cancelTransition
    } = useDeckState(initialDeckState2);
    const [
      setPlaceholderContainer,
      slideIds,
      slideIdsWithTemplates,
      slideIdsInitialized
    ] = useCollectSlides();
    useImperativeHandle(
      ref,
      () => ({
        initialized,
        activeView,
        initializeTo,
        skipTo,
        stepForward,
        stepBackward,
        advanceSlide,
        regressSlide,
        numberOfSlides: slideIds.length
      }),
      [
        initialized,
        activeView,
        initializeTo,
        skipTo,
        stepForward,
        stepBackward,
        advanceSlide,
        regressSlide,
        slideIds
      ]
    );
    useRegisterActions(
      !disableInteractivity ? [
        {
          id: KEYBOARD_SHORTCUTS_IDS.NEXT_SLIDE,
          name: "Next Slide",
          keywords: "next",
          perform: () => stepForward(),
          section: "Slide"
        },
        {
          id: KEYBOARD_SHORTCUTS_IDS.PREVIOUS_SLIDE,
          name: "Previous Slide",
          keywords: "previous",
          perform: () => stepBackward(),
          section: "Slide"
        },
        {
          id: "Restart Presentation",
          name: "Restart Presentation",
          keywords: "restart",
          perform: () => skipTo({
            slideIndex: 0,
            stepIndex: 0
          }),
          section: "Slide"
        }
      ] : []
    );
    useMousetrap(
      disableInteractivity ? {} : {
        left: () => stepBackward(),
        right: () => stepForward()
      },
      []
    );
    const [syncLocation, onActiveStateChange] = useLocationSync(__spreadValues({
      disableInteractivity,
      setState: skipTo
    }, query_string_exports));
    useEffect6(() => {
      if (!initialized)
        return;
      onActiveStateChange(activeView);
      onActiveStateChangeExternal(activeView);
    }, [
      initialized,
      activeView,
      onActiveStateChange,
      onActiveStateChangeExternal
    ]);
    useEffect6(() => {
      const initialView = syncLocation({
        slideIndex: 0,
        stepIndex: 0
      });
      initializeTo(initialView);
    }, [initializeTo, syncLocation]);
    useAutoPlay({
      enabled: autoPlay,
      loop: autoPlayLoop,
      interval: autoPlayInterval,
      stepForward
    });
    const handleSlideClick = useCallback3(
      (e, slideId) => {
        const slideIndex = slideIds.indexOf(slideId);
        onSlideClick(e, slideIndex);
      },
      [onSlideClick, slideIds]
    );
    const activeSlideId = slideIds[activeView.slideIndex];
    const pendingSlideId = slideIds[pendingView.slideIndex];
    const fullyInitialized = initialized && slideIdsInitialized;
    const [slidePortalNode, setSlidePortalNode] = useState4();
    const [backdropRef, fitAspectRatioStyle] = useAspectRatioFitting({
      targetWidth: nativeSlideWidth,
      targetHeight: nativeSlideHeight
    });
    const frameStyle = useMemo2(() => {
      const options = {
        printScale,
        overviewScale,
        nativeSlideWidth,
        nativeSlideHeight
      };
      if (overviewMode) {
        return overviewFrameStyle(options);
      } else if (printMode) {
        return printFrameStyle(options);
      }
      return {};
    }, [
      nativeSlideHeight,
      nativeSlideWidth,
      overviewMode,
      overviewScale,
      printMode,
      printScale
    ]);
    const wrapperStyle = useMemo2(() => {
      if (overviewMode) {
        return overviewWrapperStyle({ overviewScale });
      } else if (printMode) {
        return printWrapperStyle({ printScale });
      }
      return {};
    }, [overviewMode, overviewScale, printMode, printScale]);
    const backdropStyle = __spreadValues(__spreadValues({}, themeProvidedBackdropStyle), userProvidedBackdropStyle);
    const BackdropComponent = UserProvidedBackdropComponent || "div";
    if (!backdropStyle["background"] && !backdropStyle["backgroundColor"] && !UserProvidedBackdropComponent && !suppressBackdropFallback && !themeSuppressBackdropFallback) {
      backdropStyle["backgroundColor"] = "black";
    }
    const doesCurrentSlideHaveItsOwnTemplate = slideIdsWithTemplates.has(activeSlideId);
    const templateElement = typeof template === "function" ? template({
      slideNumber: activeView.slideIndex + 1,
      numberOfSlides: slideIds.length
    }) : template;
    return /* @__PURE__ */ jsx2(
      ThemeProvider,
      {
        theme: mergeTheme({
          theme: restTheme,
          printMode: printMode && !exportMode
        }),
        children: /* @__PURE__ */ jsx2(
          BackdropComponent,
          {
            ref: backdropRef,
            className,
            style: __spreadProps(__spreadValues({}, backdropStyle), {
              overflow: "hidden"
            }),
            children: /* @__PURE__ */ jsxs(
              DeckContext.Provider,
              {
                value: {
                  deckId,
                  slideCount: slideIds.length,
                  slideIds,
                  useAnimations,
                  slidePortalNode,
                  onSlideClick: handleSlideClick,
                  onMobileSlide,
                  theme: restTheme,
                  autoPlayLoop,
                  navigationDirection,
                  frameOverrideStyle: frameStyle,
                  wrapperOverrideStyle: wrapperStyle,
                  backdropNode: backdropRef.current,
                  notePortalNode,
                  initialized: fullyInitialized,
                  activeView: __spreadProps(__spreadValues({}, activeView), {
                    slideId: activeSlideId
                  }),
                  pendingView: __spreadProps(__spreadValues({}, pendingView), {
                    slideId: pendingSlideId
                  }),
                  skipTo,
                  stepForward,
                  stepBackward,
                  advanceSlide,
                  regressSlide,
                  commitTransition,
                  cancelTransition,
                  transition,
                  template,
                  backgroundImage,
                  inOverviewMode: overviewMode,
                  inPrintMode: printMode
                },
                children: [
                  /* @__PURE__ */ jsx2(
                    Portal,
                    {
                      ref: setSlidePortalNode,
                      overviewMode,
                      printMode,
                      fitAspectRatioStyle,
                      children: !doesCurrentSlideHaveItsOwnTemplate && !overviewMode && !printMode && /* @__PURE__ */ jsx2(
                        template_wrapper_default,
                        {
                          style: __spreadProps(__spreadValues({}, wrapperStyle), {
                            // Slides are appended to the parent as they are portaled in and end up later in
                            // the source order. Adding zIndex to the template to overlay the sibling slides
                            // once they have been portaled in.
                            zIndex: 1
                          }),
                          children: templateElement
                        }
                      )
                    }
                  ),
                  /* @__PURE__ */ jsx2("div", { ref: setPlaceholderContainer, style: { display: "none" }, children })
                ]
              }
            )
          }
        )
      }
    );
  }
);
DeckInternal.displayName = "Deck";
var Deck = DeckInternal;
Deck.displayName = "Deck";

// src/hooks/use-broadcast-channel.ts
import { useCallback as useCallback4, useEffect as useEffect7, useId as useId3, useRef as useRef3 } from "react";
import { BroadcastChannel as BroadcastChannelPolyfill } from "broadcast-channel";
var noop2 = () => {
};
var safeWindow = {};
if (typeof window !== "undefined") {
  safeWindow = window;
}
var BroadcastChannel = safeWindow.BroadcastChannel || BroadcastChannelPolyfill;
function useBroadcastChannel(channelName, onMessage = noop2, deps = []) {
  const broadcasterId = useId3();
  const channel = useRef3();
  useEffect7(() => {
    channel.current = new BroadcastChannel(channelName);
    return () => {
      var _a;
      (_a = channel.current) == null ? void 0 : _a.close();
    };
  }, [channelName]);
  const postMessage = useCallback4(
    (type, payload = {}) => {
      var _a;
      const message = {
        type,
        payload,
        meta: { sender: broadcasterId }
      };
      const rawMessage = JSON.stringify(message);
      (_a = channel.current) == null ? void 0 : _a.postMessage(rawMessage);
    },
    [broadcasterId]
  );
  const userMessageHandlerRef = useRef3(onMessage);
  useEffect7(() => {
    userMessageHandlerRef.current = onMessage;
  }, [...deps, postMessage]);
  useEffect7(() => {
    var _a;
    if (!channel.current)
      return;
    const messageHandler = (event) => {
      const rawMessage = event.data;
      const message = JSON.parse(rawMessage);
      userMessageHandlerRef.current(message);
    };
    (_a = channel.current) == null ? void 0 : _a.addEventListener("message", messageHandler);
    return () => {
      var _a2;
      (_a2 = channel.current) == null ? void 0 : _a2.removeEventListener("message", messageHandler);
    };
  }, [postMessage]);
  return [postMessage, broadcasterId];
}

// src/components/deck/default-deck.tsx
import { jsx as jsx3 } from "react/jsx-runtime";
var DefaultDeck = (props) => {
  const _a = props, {
    overviewMode = false,
    printMode = false,
    exportMode = false,
    toggleMode,
    children
  } = _a, rest = __objRest(_a, [
    "overviewMode",
    "printMode",
    "exportMode",
    "toggleMode",
    "children"
  ]);
  const deck = useRef4(null);
  const [postMessage] = useBroadcastChannel(
    "spectacle_presenter_bus",
    (message) => {
      if (message.type !== "SYNC")
        return;
      const nextView = message.payload;
      if (deck.current.initialized) {
        deck.current.skipTo(nextView);
      } else {
        deck.current.initializeTo(nextView);
      }
    }
  );
  useEffect8(() => {
    postMessage("SYNC_REQUEST");
  }, [postMessage]);
  useMousetrap(
    overviewMode ? {
      [KEYBOARD_SHORTCUTS.TAB_FORWARD_OVERVIEW_MODE]: () => deck.current.advanceSlide(),
      [KEYBOARD_SHORTCUTS.TAB_BACKWARD_OVERVIEW_MODE]: () => deck.current.regressSlide({
        stepIndex: 0
      }),
      [KEYBOARD_SHORTCUTS.SELECT_SLIDE_OVERVIEW_MODE]: () => toggleMode({
        newMode: SPECTACLE_MODES.DEFAULT_MODE
      })
    } : {},
    []
  );
  const onSlideClick = useCallback5(
    (e, slideIndex) => {
      if (overviewMode) {
        toggleMode({
          e,
          newMode: SPECTACLE_MODES.DEFAULT_MODE,
          senderSlideIndex: +slideIndex
        });
      }
    },
    [overviewMode, toggleMode]
  );
  const onMobileSlide = (e) => {
    if (navigator.maxTouchPoints < 1 || !deck.current)
      return;
    switch (e.dir) {
      case "Left":
        deck.current.stepForward();
        break;
      case "Right":
        deck.current.regressSlide();
        break;
    }
  };
  return /* @__PURE__ */ jsx3(
    DeckInternal,
    __spreadProps(__spreadValues({
      overviewMode,
      onSlideClick,
      onMobileSlide,
      printMode,
      exportMode,
      ref: deck
    }, rest), {
      children
    })
  );
};
var default_deck_default = DefaultDeck;

// src/components/presenter-mode/index.tsx
import {
  useRef as useRef6,
  useCallback as useCallback7,
  useState as useState7,
  useEffect as useEffect10
} from "react";
import styled7 from "styled-components";

// src/components/presenter-mode/components.tsx
import styled3 from "styled-components";
var PresenterDeckContainer = styled3.div`
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  display: flex;
  flex-direction: row;
  background-color: #181818;
  overflow: hidden;
  color: white;
`;
var NotesColumn = styled3.div`
  padding: 0;
  display: flex;
  flex-direction: column;
  width: 50%;
  border-right: 1px solid black;
`;
var PreviewColumn = styled3.div`
  background-color: black;
  display: flex;
  flex-direction: column;
  height: 100%;
  width: 50%;
  > :first-child {
    margin-bottom: 0.5em;
  }
`;
var SlideContainer = styled3.div`
  display: flex;
  flex-direction: column;
  height: calc(50% - 1em);
  width: 100%;
  overflow: hidden;
`;
var SlideWrapper = styled3.div`
  flex: 1;
  width: 100%;
  position: relative;
  .spectacle-fullscreen-button {
    display: none;
  }
  ${({ small }) => small && `flex: 0.8;`}
`;
var SlideCountLabel = styled3.span`
  background: hsla(0, 0%, 100%, 0.1);
  border-radius: 4px;
  font-size: 0.7em;
  padding: 1px 4px;
`;
var NotesContainer = styled3.div`
  border-top: 1px solid black;
  overflow-y: scroll;
  flex: 1;

  ::-webkit-scrollbar {
    width: 10px;
  }

  /* Track */
  ::-webkit-scrollbar-track {
    background-color: #111;
  }

  /* Handle */
  ::-webkit-scrollbar-thumb {
    background: #333;
    border-radius: 10px;
  }
`;
var deckBackdropStyles = {
  currentSlide: {
    width: "50vw",
    height: "50vh",
    left: "50vw",
    top: "7vh"
  },
  nextSlide: {
    width: "50vw",
    height: "33vh",
    top: "60vh",
    left: "50vw"
  }
};

// src/components/layout-primitives.ts
import styled4 from "styled-components";
import {
  compose,
  grid,
  flexbox,
  layout,
  position,
  border,
  color,
  space
} from "styled-system";
var containerPrintStyle = `
  @media print {
    height: inherit;
  }
`;
var Box = styled4.div(
  compose(layout, space, position, color, border),
  containerPrintStyle
);
var FlexBox = styled4.div(
  compose(layout, space, position, color, border, flexbox),
  containerPrintStyle
);
FlexBox.defaultProps = {
  alignItems: "center",
  justifyContent: "center",
  display: "flex"
};
var Grid = styled4.div(
  compose(layout, grid, position),
  containerPrintStyle
);
Grid.defaultProps = {
  display: "grid"
};

// src/components/presenter-mode/timer.tsx
import { useState as useState6, useCallback as useCallback6 } from "react";

// src/components/typography.tsx
import styled5 from "styled-components";
import {
  color as color2,
  typography,
  space as space2,
  compose as compose2,
  system
} from "styled-system";
var decoration = system({ textDecoration: true });
var Text = styled5.div(
  compose2(color2, typography, space2)
);
Text.defaultProps = {
  color: "primary",
  fontFamily: "text",
  fontSize: "text",
  textAlign: "left",
  padding: 0,
  margin: 0
};
var CodeSpan = styled5.code(
  compose2(color2, typography, space2)
);
CodeSpan.defaultProps = {
  fontFamily: "monospace",
  fontSize: "text"
};
var Link = styled5.a(
  compose2(color2, typography, space2, decoration)
);
Link.defaultProps = {
  fontFamily: "text",
  fontSize: "text",
  textDecoration: "underline",
  color: "quaternary"
};
var Heading = styled5(Text)({});
Heading.defaultProps = {
  color: "secondary",
  fontFamily: "header",
  fontSize: "h1",
  fontWeight: "bold",
  textAlign: "center",
  margin: 1
};
var Quote = styled5(
  Text
)`
  border-left: 1px solid
    ${({ theme, borderColor }) => borderColor || theme.colors.secondary};

  div {
    margin: 0;
  }
`;
Quote.defaultProps = {
  color: "primary",
  fontFamily: "text",
  fontSize: "text",
  textAlign: "left",
  fontStyle: "italic",
  padding: "16px 0 16px 8px",
  margin: 0
};
var listStyle = system({
  listStyleType: true
});
var OrderedList = styled5.ol(
  compose2(color2, typography, space2, listStyle)
);
OrderedList.defaultProps = {
  color: "primary",
  fontFamily: "text",
  fontSize: "text",
  textAlign: "left",
  margin: 0
};
var UnorderedList = styled5.ul(
  compose2(color2, typography, space2, listStyle)
);
UnorderedList.defaultProps = {
  color: "primary",
  fontFamily: "text",
  fontSize: "text",
  textAlign: "left",
  margin: 0
};
var ListItem = styled5.li(
  compose2(color2, typography, space2)
);
ListItem.defaultProps = {
  margin: 0
};

// src/components/internal-button.ts
import styled6 from "styled-components";
var InternalButton = styled6("button")`
  background: #333;
  border: 1px solid hsla(0, 0%, 0%, 0.4);
  border-radius: 2px;
  color: #fff;
  box-shadow: inset 1px 1px 0 hsla(0, 0%, 100%, 0.1),
    1px 1px 0 hsla(0, 0%, 0%, 0.1);
  padding: 3px 20px;
  font-size: 14px;
  font-weight: bold;
  font-family: ${SYSTEM_FONT};

  &:active {
    box-shadow: inset 1px 1px 0 hsla(0, 0%, 0%, 0.25),
      1px 1px 0 hsla(0, 0%, 0%, 0.1);
  }
`;
var internal_button_default = InternalButton;

// src/utils/use-timer.ts
import { useState as useState5, useRef as useRef5, useEffect as useEffect9 } from "react";
var useTimer = (handler, period, isActive) => {
  const [timeDelay, setTimeDelay] = useState5(1);
  const initialTime = useRef5();
  const callBack = useRef5();
  useEffect9(() => {
    callBack.current = handler;
  }, [handler]);
  useEffect9(() => {
    if (isActive) {
      initialTime.current = (/* @__PURE__ */ new Date()).getTime();
      const timer = setInterval(() => {
        const currentTime = (/* @__PURE__ */ new Date()).getTime();
        const delay = currentTime - initialTime.current;
        initialTime.current = currentTime;
        setTimeDelay(delay / 1e3);
        callBack.current(timeDelay);
      }, period);
      return () => {
        clearInterval(timer);
      };
    }
  }, [period, isActive, timeDelay]);
};

// src/components/presenter-mode/timer.tsx
import { useRegisterActions as useRegisterActions2 } from "kbar";
import { jsx as jsx4, jsxs as jsxs2 } from "react/jsx-runtime";
var Timer = () => {
  const [timer, setTimer] = useState6(0);
  const [timerStarted, setTimerStarted] = useState6(false);
  const addToTimer = useCallback6((v) => setTimer((s) => s + v), []);
  const toggleTimer = useCallback6(() => setTimerStarted((s) => !s), []);
  const resetTimer = useCallback6(() => setTimer(0), []);
  useTimer(addToTimer, 1e3, timerStarted);
  const minutes = Math.floor(Math.round(timer) / 60);
  useRegisterActions2([
    {
      id: "Start/Pause Timer",
      name: "Start/Pause Timer",
      keywords: "start pause",
      perform: toggleTimer,
      section: "Timer"
    },
    {
      id: "Restart Timer",
      name: "Restart Timer",
      keywords: "restart",
      perform: resetTimer,
      section: "Timer"
    }
  ]);
  return /* @__PURE__ */ jsxs2(FlexBox, { children: [
    /* @__PURE__ */ jsx4(FlexBox, { justifyContent: "flex-start", flex: 1, children: /* @__PURE__ */ jsx4(
      Text,
      {
        fontFamily: SYSTEM_FONT,
        fontWeight: "bold",
        fontSize: "2vw",
        textAlign: "left",
        children: `${String(minutes).padStart(2, "0")}:${String(
          Math.round(timer) - minutes * 60
        ).padStart(2, "0")}`
      }
    ) }),
    /* @__PURE__ */ jsx4(internal_button_default, { onClick: toggleTimer, children: timerStarted ? "Stop Timer" : "Start Timer" }),
    /* @__PURE__ */ jsx4(Box, { width: 8 }),
    /* @__PURE__ */ jsx4(internal_button_default, { onClick: resetTimer, children: "Reset" })
  ] });
};

// src/components/presenter-mode/index.tsx
import { jsx as jsx5, jsxs as jsxs3 } from "react/jsx-runtime";
var endOfNextSlide = ({ slideIndex }) => ({
  slideIndex: slideIndex + 1,
  stepIndex: GOTO_FINAL_STEP
});
var PreviewSlideWrapper = styled7.div(
  ({ visible }) => ({
    visibility: visible ? "visible" : "hidden"
  })
);
var PresenterMode = (props) => {
  const { children, theme, backgroundImage, template } = props;
  const deck = useRef6(null);
  const previewDeck = useRef6(null);
  const [notePortalNode, setNotePortalNode] = useState7();
  const [showFinalSlide, setShowFinalSlide] = useState7(true);
  const [postMessage] = useBroadcastChannel(
    "spectacle_presenter_bus",
    (message) => {
      if (message.type === "SYNC_REQUEST") {
        postMessage("SYNC", deck.current.activeView);
      }
    }
  );
  const [syncLocation, setLocation] = useLocationSync(__spreadValues({
    setState: (state) => deck.current.skipTo(state)
  }, query_string_exports));
  const onActiveStateChange = useCallback7(
    (activeView) => {
      var _a, _b;
      setLocation(activeView);
      postMessage("SYNC", activeView);
      setShowFinalSlide(
        (((_a = deck.current) == null ? void 0 : _a.numberOfSlides) || 0) - 1 !== ((_b = deck == null ? void 0 : deck.current) == null ? void 0 : _b.activeView.slideIndex)
      );
      previewDeck.current.skipTo(endOfNextSlide(activeView));
    },
    [postMessage, setLocation]
  );
  useEffect10(() => {
    const initialView = syncLocation({
      slideIndex: 0,
      stepIndex: 0
    });
    deck.current.initializeTo(initialView);
    postMessage("SYNC", initialView);
    previewDeck.current.initializeTo(endOfNextSlide(initialView));
  }, [postMessage, syncLocation]);
  return /* @__PURE__ */ jsxs3(PresenterDeckContainer, { children: [
    /* @__PURE__ */ jsxs3(NotesColumn, { children: [
      /* @__PURE__ */ jsxs3(FlexBox, { justifyContent: "space-between", paddingTop: 15, paddingX: 15, children: [
        /* @__PURE__ */ jsx5(SpectacleLogo, { size: 60 }),
        /* @__PURE__ */ jsx5(FlexBox, { width: 0.75, flexDirection: "column", alignItems: "flex-end", children: /* @__PURE__ */ jsxs3(
          Text,
          {
            "data-testid": "use-browser-tab-text",
            fontSize: 15,
            fontFamily: SYSTEM_FONT,
            textAlign: "right",
            padding: "0px",
            margin: "0px 0px 10px",
            children: [
              "Open a second browser tab at ",
              window.location.host,
              " to use as the audience deck."
            ]
          }
        ) })
      ] }),
      /* @__PURE__ */ jsx5(Box, { paddingX: 15, paddingY: 10, children: /* @__PURE__ */ jsx5(Timer, {}) }),
      /* @__PURE__ */ jsx5(NotesContainer, { children: /* @__PURE__ */ jsx5(
        Text,
        {
          ref: setNotePortalNode,
          fontFamily: SYSTEM_FONT,
          lineHeight: "1.5em",
          fontSize: "1.5vw",
          padding: 15
        }
      ) })
    ] }),
    /* @__PURE__ */ jsxs3(PreviewColumn, { children: [
      /* @__PURE__ */ jsx5(
        DeckInternal,
        {
          notePortalNode,
          backdropStyle: deckBackdropStyles.currentSlide,
          onActiveStateChange,
          ref: deck,
          theme,
          backgroundImage,
          template,
          children
        }
      ),
      /* @__PURE__ */ jsx5(PreviewSlideWrapper, { visible: showFinalSlide, children: /* @__PURE__ */ jsx5(
        DeckInternal,
        {
          disableInteractivity: true,
          useAnimations: false,
          backdropStyle: deckBackdropStyles.nextSlide,
          ref: previewDeck,
          theme,
          backgroundImage,
          template,
          children
        }
      ) })
    ] })
  ] });
};
var presenter_mode_default = PresenterMode;

// src/components/print-mode/index.tsx
import styled9, { createGlobalStyle } from "styled-components";

// src/components/slide/slide.tsx
import {
  createContext as createContext2,
  useCallback as useCallback8,
  useContext as useContext2,
  useEffect as useEffect12,
  useMemo as useMemo3,
  useState as useState9
} from "react";
import ReactDOM from "react-dom";
import styled8, { css, ThemeContext } from "styled-components";
import {
  background,
  color as color3,
  space as space3
} from "styled-system";
import { animated, useSpring } from "react-spring";

// src/hooks/use-steps.tsx
import { useState as useState8, useContext, useRef as useRef7, useEffect as useEffect11, useId as useId4 } from "react";

// src/utils/sort-by.ts
function sortByKeyComparator(key) {
  return (lhs, rhs) => {
    if (lhs[key] < rhs[key]) {
      return -1;
    } else if (lhs[key] > rhs[key]) {
      return 1;
    }
    return 0;
  };
}

// src/hooks/use-steps.tsx
import { jsx as jsx6 } from "react/jsx-runtime";
var PLACEHOLDER_CLASS_NAME2 = "step-placeholder";
function useSteps(numSteps = 1, {
  id: userProvidedId,
  priority,
  stepIndex
} = {}) {
  const id = useId4();
  const [stepId] = useState8(userProvidedId || id);
  const slideContext = useContext(SlideContext);
  if (slideContext === null) {
    throw new Error(
      "`useSteps` must be called within a SlideContext.Provider. Did you call `useSteps` in a component that was not placed inside a <Slide>?"
    );
  }
  const { activeStepIndex, activationThresholds } = slideContext;
  let relStep;
  if (activationThresholds === null) {
    relStep = 0;
  } else {
    const threshold = activationThresholds[stepId];
    relStep = activeStepIndex - threshold;
    relStep = clamp(relStep, -1, numSteps - 1);
  }
  const isActive = relStep >= 0;
  const placeholderRef = useRef7(null);
  useEffect11(() => {
    if (!placeholderRef.current) {
      console.warn(
        `A placeholder ref does not appear to be present in the DOM for stepper element with id '${stepId}'. (Did you forget to render it?)`
      );
    }
  });
  const placeholderProps = {
    ref: placeholderRef,
    className: PLACEHOLDER_CLASS_NAME2,
    style: { display: "none" },
    "data-step-id": stepId,
    "data-step-count": numSteps
  };
  if (priority !== void 0) {
    placeholderProps["data-priority"] = priority;
  } else if (stepIndex !== void 0) {
    console.warn(
      "`options.stepIndex` option to `useSteps` is deprecated- please use `priority` option instead."
    );
    placeholderProps["data-priority"] = stepIndex;
  }
  return {
    stepId,
    isActive,
    step: relStep,
    placeholder: /* @__PURE__ */ jsx6("div", __spreadValues({}, placeholderProps))
  };
}
function useCollectSteps() {
  const [stepContainer, setStepContainer] = useState8();
  const [activationThresholds, setActivationThresholds] = useState8({});
  const [finalStepIndex, setFinalStepIndex] = useState8(0);
  useEffect11(() => {
    if (!stepContainer)
      return;
    const placeholderNodes = stepContainer.getElementsByClassName(
      PLACEHOLDER_CLASS_NAME2
    );
    const [thresholds, numSteps] = [...placeholderNodes].map((node, index) => {
      const dataset = node.dataset;
      const id = dataset.stepId;
      let stepCount = Number(dataset.stepCount);
      if (isNaN(stepCount)) {
        stepCount = 1;
      }
      let priority = Number(dataset.priority);
      if (isNaN(priority)) {
        priority = index;
      }
      return {
        id,
        count: stepCount,
        priority
      };
    }).concat().sort(sortByKeyComparator("priority")).reduce(
      (memo, el) => {
        const [thresholds2, nextThreshold] = memo;
        const { id, count } = el;
        thresholds2[id] = nextThreshold;
        return [thresholds2, nextThreshold + count];
      },
      [{}, 1]
    );
    setActivationThresholds(thresholds);
    setFinalStepIndex(numSteps - 1);
  }, [stepContainer]);
  return {
    setStepContainer,
    activationThresholds,
    finalStepIndex
  };
}

// src/components/slide/slide.tsx
import { useSwipeable } from "react-swipeable";
import { Fragment, jsx as jsx7, jsxs as jsxs4 } from "react/jsx-runtime";
var noop3 = () => {
};
var SlideContext = createContext2(null);
SlideContext.displayName = "SlideContext";
var SlideContainer2 = styled8.div`
  ${color3};
  width: 100%;
  height: 100%;
  position: relative;
  overflow: hidden;
  display: flex;
  z-index: 0;

  &:before {
    ${background};
    content: ' ';
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: -1;
    opacity: ${({ backgroundOpacity }) => backgroundOpacity};
  }
`;
var SlideWrapper2 = styled8.div(
  color3,
  space3,
  css`
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
  `
);
var AnimatedDiv = styled8(animated.div)`
  width: 100%;
  height: 100%;
  position: absolute;
  background: transparent;

  ${({ tabIndex }) => tabIndex === 0 && css`
      outline: 2px solid white;
    `}
`;
var Slide = (props) => {
  const {
    id: userProvidedId,
    children,
    backgroundColor = "tertiary",
    backgroundImage,
    backgroundOpacity = 1,
    backgroundPosition = "center",
    backgroundRepeat = "no-repeat",
    backgroundSize = "cover",
    padding = 2,
    textColor = "primary",
    template: slideTemplate,
    transition: slideTransition2 = {},
    className = ""
  } = props;
  if (useContext2(SlideContext)) {
    throw new Error(`Slide components may not be nested within each other.`);
  }
  const slideHasTemplate = slideTemplate !== void 0;
  const { slideId, placeholder } = useSlide(slideHasTemplate, userProvidedId);
  const { setStepContainer, activationThresholds, finalStepIndex } = useCollectSteps();
  const {
    onSlideClick = noop3,
    onMobileSlide,
    useAnimations,
    autoPlayLoop,
    navigationDirection,
    slidePortalNode,
    frameOverrideStyle = {},
    wrapperOverrideStyle = {},
    slideIds,
    activeView,
    pendingView,
    advanceSlide,
    regressSlide,
    skipTo,
    commitTransition,
    cancelTransition,
    transition,
    template: deckTemplate,
    slideCount,
    backgroundImage: deckBackgroundImage,
    inOverviewMode,
    inPrintMode
  } = useContext2(DeckContext);
  const handleClick = useCallback8(
    (e) => {
      onSlideClick(e, slideId);
    },
    [onSlideClick, slideId]
  );
  const mergedTransition = useMemo3(() => {
    const result = __spreadValues({}, transition);
    "from" in slideTransition2 && (result.from = slideTransition2.from);
    "enter" in slideTransition2 && (result.enter = slideTransition2.enter);
    "leave" in slideTransition2 && (result.leave = slideTransition2.leave);
    return result;
  }, [slideTransition2, transition]);
  const isActive = activeView.slideId === slideId;
  const isPending = pendingView.slideId === slideId;
  const slideIndex = slideIds.findIndex((id) => id === slideId);
  const [isPassed, isUpcoming] = (() => {
    if (slideCount === 1) {
      return [false, false];
    }
    if (slideCount === 2) {
      if (slideIndex === activeView.slideIndex) {
        return [false, false];
      }
      if (slideIndex === 0) {
        return [true, false];
      }
      return [false, true];
    }
    const isWrappingForward = slideIndex === slideCount - 1 && activeView.slideIndex === 0;
    const isWrappingReverse = slideIndex === 0 && activeView.slideIndex === slideCount - 1;
    const isWrapping = isWrappingForward || isWrappingReverse;
    const isPassed2 = !isWrapping && slideIndex < activeView.slideIndex || isWrappingForward;
    const isUpcoming2 = !isWrapping && slideIndex > activeView.slideIndex || isWrappingReverse;
    return [isPassed2, isUpcoming2];
  })();
  const willEnter = !isActive && isPending;
  const willExit = isActive && !isPending;
  const slideWillChange = activeView.slideIndex !== pendingView.slideIndex;
  const stepWillChange = activeView.stepIndex !== pendingView.stepIndex;
  const [animate, setAnimate] = useState9(false);
  const infinityDirection = slideIndex < activeView.slideIndex ? Infinity : -Infinity;
  const internalStepIndex = isActive ? activeView.stepIndex : infinityDirection;
  const [hover, setHover] = useState9(false);
  const onHoverChange = useCallback8(() => {
    setHover(!hover);
  }, [hover]);
  useEffect12(() => {
    if (!isActive)
      return;
    if (!stepWillChange)
      return;
    if (slideWillChange)
      return;
    if (pendingView.stepIndex < 0) {
      setAnimate(false);
      if (autoPlayLoop && activeView.slideIndex === 0) {
        skipTo({ slideIndex: slideCount - 1, stepIndex: GOTO_FINAL_STEP });
      } else {
        regressSlide();
      }
    } else if (pendingView.stepIndex > finalStepIndex) {
      setAnimate(true);
      if (autoPlayLoop && activeView.slideIndex === slideCount - 1) {
        skipTo({ slideIndex: 0, stepIndex: 0 });
      } else {
        advanceSlide();
      }
    } else if (pendingView.stepIndex === GOTO_FINAL_STEP) {
      setAnimate(false);
      commitTransition({
        stepIndex: finalStepIndex
      });
    } else {
      const isSingleForwardStep = navigationDirection > 0;
      setAnimate(isSingleForwardStep);
      commitTransition();
    }
  }, [
    activeView,
    advanceSlide,
    autoPlayLoop,
    commitTransition,
    finalStepIndex,
    navigationDirection,
    isActive,
    pendingView,
    regressSlide,
    skipTo,
    slideCount,
    slideWillChange,
    stepWillChange
  ]);
  useEffect12(() => {
    if (!willExit)
      return;
    if (pendingView.slideId === void 0 && !autoPlayLoop) {
      setAnimate(false);
      cancelTransition();
    } else {
      const isSingleForwardStep = navigationDirection > 0;
      setAnimate(isSingleForwardStep);
    }
  }, [
    activeView.slideIndex,
    autoPlayLoop,
    cancelTransition,
    pendingView,
    navigationDirection,
    willExit
  ]);
  useEffect12(() => {
    if (!willEnter)
      return;
    if (finalStepIndex === void 0)
      return;
    if (pendingView.stepIndex < 0) {
      setAnimate(false);
      commitTransition({
        stepIndex: 0
      });
    } else if (pendingView.stepIndex === GOTO_FINAL_STEP) {
      setAnimate(false);
      commitTransition({
        stepIndex: finalStepIndex
      });
    } else if (pendingView.stepIndex > finalStepIndex) {
      setAnimate(false);
      commitTransition({
        stepIndex: finalStepIndex
      });
    } else {
      const isSingleForwardStep = navigationDirection > 0;
      setAnimate(isSingleForwardStep);
      commitTransition();
    }
  }, [
    activeView,
    commitTransition,
    finalStepIndex,
    navigationDirection,
    pendingView,
    willEnter
  ]);
  const target = useMemo3(() => {
    if (isPassed) {
      return [mergedTransition.leave, { display: "none" }];
    }
    if (isActive) {
      return __spreadProps(__spreadValues({}, mergedTransition.enter), {
        display: "unset"
      });
    }
    if (isUpcoming) {
      return __spreadProps(__spreadValues({}, mergedTransition.from), {
        display: "none"
      });
    }
    return {
      display: "none"
    };
  }, [
    isPassed,
    isActive,
    isUpcoming,
    mergedTransition.leave,
    mergedTransition.enter,
    mergedTransition.from
  ]);
  const immediate = !animate || !useAnimations;
  const springFrameStyle = useSpring({
    to: target,
    immediate
  });
  const theme = useContext2(ThemeContext);
  const scaledWrapperOverrideStyle = useMemo3(() => {
    var _a;
    if (!wrapperOverrideStyle || Object.entries(wrapperOverrideStyle).length === 0) {
      return {};
    }
    const themeSlidePadding = ((_a = theme == null ? void 0 : theme.space) == null ? void 0 : _a[padding]) || 0;
    return __spreadProps(__spreadValues({}, wrapperOverrideStyle), {
      width: `calc(${wrapperOverrideStyle.width} - ${themeSlidePadding * 2}px)`,
      height: `calc(${wrapperOverrideStyle.height} - ${themeSlidePadding * 2}px)`
    });
  }, [wrapperOverrideStyle, theme, padding]);
  const template = slideHasTemplate ? slideTemplate : deckTemplate;
  const templateElement = typeof template === "function" ? template({
    slideNumber: activeView.slideIndex + 1,
    numberOfSlides: slideCount
  }) : template;
  const swipeHandler = useSwipeable({
    onSwiped: (eventData) => onMobileSlide(eventData)
  });
  return /* @__PURE__ */ jsxs4(Fragment, { children: [
    placeholder,
    /* @__PURE__ */ jsx7(
      SlideContext.Provider,
      {
        value: {
          immediate,
          slideId,
          isSlideActive: isActive,
          activationThresholds,
          activeStepIndex: internalStepIndex
        },
        children: slidePortalNode && ReactDOM.createPortal(
          /* @__PURE__ */ jsx7(
            AnimatedDiv,
            {
              ref: setStepContainer,
              onClick: handleClick,
              tabIndex: inOverviewMode && isActive ? 0 : void 0,
              style: __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, inOverviewMode || inPrintMode ? {} : springFrameStyle), isActive && { display: "unset" }), frameOverrideStyle), inOverviewMode && hover && {
                outline: "2px solid white"
              }),
              onMouseEnter: onHoverChange,
              onMouseLeave: onHoverChange,
              children: /* @__PURE__ */ jsxs4(
                SlideContainer2,
                __spreadProps(__spreadValues({
                  className,
                  backgroundColor,
                  backgroundImage: backgroundImage || deckBackgroundImage,
                  backgroundOpacity,
                  backgroundPosition,
                  backgroundRepeat,
                  backgroundSize,
                  color: textColor
                }, swipeHandler), {
                  children: [
                    (slideHasTemplate && isActive || inOverviewMode || inPrintMode) && /* @__PURE__ */ jsx7(template_wrapper_default, { style: wrapperOverrideStyle, children: templateElement }),
                    /* @__PURE__ */ jsx7(
                      SlideWrapper2,
                      {
                        style: scaledWrapperOverrideStyle,
                        padding,
                        children
                      }
                    )
                  ]
                })
              )
            }
          ),
          slidePortalNode
        )
      }
    )
  ] });
};
var slide_default = Slide;

// src/components/print-mode/index.tsx
import { Fragment as Fragment2, jsx as jsx8, jsxs as jsxs5 } from "react/jsx-runtime";
var Backdrop = styled9.div`
  background-color: white;
`;
var PrintStyle = createGlobalStyle`
  @media print {
    body, html {
      margin: 0;
    }
    @page {
      size: ${({ pageSize }) => pageSize};
    }
    ${AnimatedDiv} {
      @page {
        margin: 0;
      }
    }
  }
`;
function PrintMode({
  children,
  theme,
  exportMode,
  pageSize,
  backgroundImage,
  template
}) {
  var _a, _b;
  const width = ((_a = theme == null ? void 0 : theme.size) == null ? void 0 : _a.width) || default_theme_default.size.width;
  const height = ((_b = theme == null ? void 0 : theme.size) == null ? void 0 : _b.height) || default_theme_default.size.height;
  const computedPageSize = pageSize || `${width}px ${height}px`;
  return /* @__PURE__ */ jsxs5(Fragment2, { children: [
    /* @__PURE__ */ jsx8(PrintStyle, { pageSize: computedPageSize }),
    /* @__PURE__ */ jsx8(
      DeckInternal,
      {
        printMode: true,
        exportMode,
        disableInteractivity: true,
        theme: __spreadProps(__spreadValues({}, theme), { Backdrop, backdropStyle: {} }),
        backgroundImage,
        template,
        children
      }
    )
  ] });
}

// src/hooks/use-modes.ts
import { useCallback as useCallback9, useRef as useRef8 } from "react";
import { parse as parseQS2, stringify as stringifyQS2 } from "query-string";
var useModes = () => {
  var _a, _b;
  const qs = ((_b = (_a = typeof window !== "undefined" ? window : {}) == null ? void 0 : _a.location) == null ? void 0 : _b.search) || "";
  const mode = useRef8(
    modeKeyForSearchParam(
      parseQS2(qs, {
        parseBooleans: true
      })
    )
  );
  const toggleMode = useCallback9(
    (args) => {
      const { newMode, senderSlideIndex, e } = args;
      e == null ? void 0 : e.preventDefault();
      let stepIndex = 0;
      let slideIndex = senderSlideIndex || "";
      const searchParams = parseQS2(window.location.search, {
        parseBooleans: true
      });
      if (!slideIndex) {
        slideIndex = searchParams.slideIndex;
        stepIndex = searchParams.stepIndex;
      }
      if (mode.current === newMode) {
        window.location.search = stringifyQS2({
          slideIndex,
          stepIndex
        });
        return;
      }
      mode.current = newMode;
      window.location.search = stringifyQS2(__spreadValues({
        slideIndex,
        stepIndex
      }, modeSearchParamForKey(newMode)));
    },
    [mode]
  );
  const getCurrentMode = useCallback9(() => mode.current, []);
  return { toggleMode, getCurrentMode };
};
function modeSearchParamForKey(key) {
  if (key === SPECTACLE_MODES.PRESENTER_MODE) {
    return { presenterMode: true };
  } else if (key === SPECTACLE_MODES.OVERVIEW_MODE) {
    return { overviewMode: true };
  } else if (key === SPECTACLE_MODES.PRINT_MODE) {
    return { printMode: true };
  } else if (key === SPECTACLE_MODES.EXPORT_MODE) {
    return { exportMode: true };
  }
  return {};
}
function modeKeyForSearchParam({
  presenterMode,
  overviewMode,
  printMode,
  exportMode
}) {
  if (presenterMode) {
    return SPECTACLE_MODES.PRESENTER_MODE;
  } else if (overviewMode) {
    return SPECTACLE_MODES.OVERVIEW_MODE;
  } else if (printMode) {
    return SPECTACLE_MODES.PRINT_MODE;
  } else if (exportMode) {
    return SPECTACLE_MODES.EXPORT_MODE;
  }
  return SPECTACLE_MODES.DEFAULT_MODE;
}
var use_modes_default = useModes;

// src/components/command-bar/index.tsx
import { KBarProvider } from "kbar";

// src/components/command-bar/command-bar-actions.tsx
var spectacleModeDisplay = {
  [SPECTACLE_MODES.DEFAULT_MODE]: "Default Mode",
  [SPECTACLE_MODES.PRESENTER_MODE]: "Presenter Mode",
  [SPECTACLE_MODES.OVERVIEW_MODE]: "Overview Mode",
  [SPECTACLE_MODES.PRINT_MODE]: "Print Mode",
  [SPECTACLE_MODES.EXPORT_MODE]: "Export Mode"
};
var getName = (currentMode, mode) => {
  const defaultMode = SPECTACLE_MODES.DEFAULT_MODE;
  return currentMode === mode ? `\u2190 Back to ${spectacleModeDisplay[defaultMode]}` : spectacleModeDisplay[mode];
};
var useCommandBarActions = () => {
  const { toggleMode, getCurrentMode } = use_modes_default();
  const currentMode = getCurrentMode();
  return [
    {
      id: KEYBOARD_SHORTCUTS_IDS.PRESENTER_MODE,
      name: getName(currentMode, SPECTACLE_MODES.PRESENTER_MODE),
      keywords: "presenter",
      perform: () => toggleMode({ newMode: SPECTACLE_MODES.PRESENTER_MODE }),
      section: "Mode"
    },
    {
      id: KEYBOARD_SHORTCUTS_IDS.OVERVIEW_MODE,
      name: getName(currentMode, SPECTACLE_MODES.OVERVIEW_MODE),
      keywords: "overview",
      perform: () => toggleMode({ newMode: SPECTACLE_MODES.OVERVIEW_MODE }),
      section: "Mode"
    },
    {
      id: KEYBOARD_SHORTCUTS_IDS.PRINT_MODE,
      name: getName(currentMode, SPECTACLE_MODES.PRINT_MODE),
      keywords: "export",
      perform: () => toggleMode({ newMode: SPECTACLE_MODES.PRINT_MODE }),
      section: "Mode"
    },
    {
      id: KEYBOARD_SHORTCUTS_IDS.EXPORT_MODE,
      name: getName(currentMode, SPECTACLE_MODES.EXPORT_MODE),
      keywords: "export",
      perform: () => toggleMode({ newMode: SPECTACLE_MODES.EXPORT_MODE }),
      section: "Mode"
    }
  ];
};
var command_bar_actions_default = useCommandBarActions;

// src/components/command-bar/search/index.tsx
import styled11 from "styled-components";
import { KBarPortal, KBarPositioner, KBarAnimator, KBarSearch } from "kbar";

// src/components/command-bar/results/index.tsx
import styled10 from "styled-components";
import { KBarResults, useMatches } from "kbar";

// src/utils/platform-keys.ts
function isPlatformMacOS() {
  return /Mac|iPad/.test(navigator.userAgent);
}
function getKeyForOS(key) {
  const isMacOS = isPlatformMacOS();
  const replacementKeyMap = {
    alt: isMacOS ? "\u2325" : "Alt",
    ctrl: isMacOS ? "^" : "Ctrl",
    mod: isMacOS ? "\u2318" : "Ctrl",
    shift: isMacOS ? "\u21E7" : "Shift"
  };
  return replacementKeyMap[key];
}
function prettifyShortcut(shortcut) {
  const _shortcut = typeof shortcut === "string" ? shortcut : shortcut.join("+");
  return _shortcut.toLowerCase().replace("alt", getKeyForOS("alt")).replace("ctrl", getKeyForOS("ctrl")).replace("mod", getKeyForOS("mod")).replace("shift", getKeyForOS("shift")).replace("left", "\u2190").replace("right", "\u2192").split("+").map((s) => s.charAt(0).toUpperCase() + s.slice(1));
}

// src/components/command-bar/results/index.tsx
import { jsx as jsx9, jsxs as jsxs6 } from "react/jsx-runtime";
function getShortcutKeys({ id, shortcut = [] }) {
  if (id in KEYBOARD_SHORTCUTS && !(shortcut == null ? void 0 : shortcut.length)) {
    const _id = id;
    return prettifyShortcut(KEYBOARD_SHORTCUTS[_id]);
  }
  return prettifyShortcut(shortcut);
}
var ResultCommand = styled10.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: ${(p) => p.active ? "lightsteelblue" : "transparent"};
  padding: 0.5rem 1rem;
  cursor: pointer;
  height: 30px;
`;
var ResultSectionHeader = styled10(Text)`
  background-color: white;
  color: gray;
  margin: 0 2rem;
  padding: 0.5rem 0;
  font-size: small;
  font-weight: bold;
  font-family: ${SYSTEM_FONT};
`;
var ResultShortcut = styled10.span`
  display: flex;
  gap: 5px;
`;
var ResultShortcutKey = styled10.kbd`
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: #eee;
  border-radius: 5px;
  border: 1px solid #b4b4b4;
  padding: 5px 10px;
  min-width: 20px;
  height: 25px;
  white-space: nowrap;
  font-family: ${SYSTEM_FONT};
`;
function onRender({ item, active }) {
  if (typeof item === "string") {
    return /* @__PURE__ */ jsx9(ResultSectionHeader, { children: item });
  } else {
    return /* @__PURE__ */ jsxs6(ResultCommand, { active, children: [
      /* @__PURE__ */ jsx9(Text, { fontFamily: SYSTEM_FONT, children: item.name }),
      /* @__PURE__ */ jsx9(ResultShortcut, { children: getShortcutKeys(item).map(
        (key) => key && /* @__PURE__ */ jsx9(ResultShortcutKey, { children: key }, `${item.id}-${key}`)
      ) })
    ] });
  }
}
var CommandBarResults = () => {
  const { results } = useMatches();
  return /* @__PURE__ */ jsx9(KBarResults, { items: results, onRender });
};
var results_default = CommandBarResults;

// src/components/command-bar/search/index.tsx
import { jsx as jsx10, jsxs as jsxs7 } from "react/jsx-runtime";
var KBarSearchStyled = styled11(KBarSearch)`
  padding: 12px 16px;
  font-size: 16px;
  width: 100%;
  box-sizing: border-box;
  outline: none;
  border: none;
`;
var KBarAnimatorStyled = styled11(KBarAnimator)`
  max-width: 600px;
  width: 100%;
  background: white;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: rgb(0 0 0 / 50%) 0px 16px 70px;
`;
var CommandBarSearch = () => {
  return /* @__PURE__ */ jsx10(KBarPortal, { children: /* @__PURE__ */ jsx10(KBarPositioner, { children: /* @__PURE__ */ jsxs7(KBarAnimatorStyled, { children: [
    /* @__PURE__ */ jsx10(KBarSearchStyled, {}),
    /* @__PURE__ */ jsx10(results_default, {})
  ] }) }) });
};
var search_default = CommandBarSearch;

// src/components/command-bar/index.tsx
import { jsx as jsx11, jsxs as jsxs8 } from "react/jsx-runtime";
var CommandBar = ({ children }) => {
  const actions = command_bar_actions_default();
  return /* @__PURE__ */ jsxs8(KBarProvider, { actions, children: [
    /* @__PURE__ */ jsx11(search_default, {}),
    children
  ] });
};
var command_bar_default = CommandBar;

// src/components/deck/index.tsx
import { jsx as jsx12 } from "react/jsx-runtime";
var View = (_a) => {
  var _b = _a, {
    getCurrentMode,
    toggleMode
  } = _b, props = __objRest(_b, [
    "getCurrentMode",
    "toggleMode"
  ]);
  const mode = getCurrentMode();
  switch (mode) {
    case SPECTACLE_MODES.DEFAULT_MODE:
      return /* @__PURE__ */ jsx12(default_deck_default, __spreadProps(__spreadValues({}, props), { toggleMode }));
    case SPECTACLE_MODES.PRESENTER_MODE:
      return /* @__PURE__ */ jsx12(presenter_mode_default, __spreadValues({}, props));
    case SPECTACLE_MODES.PRINT_MODE:
      return /* @__PURE__ */ jsx12(PrintMode, __spreadValues({}, props));
    case SPECTACLE_MODES.EXPORT_MODE:
      return /* @__PURE__ */ jsx12(PrintMode, __spreadProps(__spreadValues({}, props), { exportMode: true }));
    case SPECTACLE_MODES.OVERVIEW_MODE:
      return /* @__PURE__ */ jsx12(default_deck_default, __spreadValues({ overviewMode: true, toggleMode }, props));
    default:
      return /* @__PURE__ */ jsx12(Fragment3, {});
  }
};
var SpectacleDeck = (props) => {
  const { toggleMode, getCurrentMode } = use_modes_default();
  useMousetrap(
    {
      [KEYBOARD_SHORTCUTS.PRESENTER_MODE]: (e) => e && toggleMode({ e, newMode: SPECTACLE_MODES.PRESENTER_MODE }),
      [KEYBOARD_SHORTCUTS.PRINT_MODE]: (e) => e && toggleMode({ e, newMode: SPECTACLE_MODES.PRINT_MODE }),
      [KEYBOARD_SHORTCUTS.EXPORT_MODE]: (e) => e && toggleMode({ e, newMode: SPECTACLE_MODES.EXPORT_MODE }),
      [KEYBOARD_SHORTCUTS.OVERVIEW_MODE]: (e) => e && toggleMode({ e, newMode: SPECTACLE_MODES.OVERVIEW_MODE })
    },
    []
  );
  return /* @__PURE__ */ jsx12(command_bar_default, { children: /* @__PURE__ */ jsx12(
    View,
    __spreadValues({
      getCurrentMode,
      toggleMode
    }, props)
  ) });
};
var deck_default = SpectacleDeck;

// src/components/appear.tsx
import { useContext as useContext3 } from "react";
import { animated as animated2, useSpring as useSpring2 } from "react-spring";
import { Fragment as Fragment4, jsx as jsx13, jsxs as jsxs9 } from "react/jsx-runtime";
var SteppedComponent = (props) => {
  const {
    id,
    className,
    children: childrenOrRenderFunction,
    tagName = "div",
    priority,
    stepIndex,
    numSteps = 1,
    alwaysAppearActive = false,
    activeStyle = { opacity: "1" },
    inactiveStyle = { opacity: "0" }
  } = props;
  const slideContext = useContext3(SlideContext);
  const { inPrintMode, inOverviewMode } = useContext3(DeckContext);
  if (slideContext === null) {
    throw new Error(
      "This component must be used within a SlideContext.Provider. Did you put an <Appear> or <Stepper> component outside of a <Slide>?"
    );
  }
  const { immediate } = slideContext;
  const { isActive, step, placeholder } = useSteps(numSteps, {
    id,
    priority,
    stepIndex
  });
  const AnimatedEl = animated2[tagName];
  let children;
  if (typeof childrenOrRenderFunction === "function") {
    children = childrenOrRenderFunction(step, isActive);
  } else {
    children = childrenOrRenderFunction;
  }
  const springStyle = useSpring2({
    to: isActive ? activeStyle : inactiveStyle,
    immediate
  });
  return /* @__PURE__ */ jsxs9(Fragment4, { children: [
    placeholder,
    /* @__PURE__ */ jsx13(
      AnimatedEl,
      {
        style: alwaysAppearActive || inPrintMode || inOverviewMode ? activeStyle : springStyle,
        className,
        "data-testid": "AppearElement",
        children
      }
    )
  ] });
};
var Appear = (props) => {
  const _a = props, { children } = _a, restProps = __objRest(_a, ["children"]);
  return /* @__PURE__ */ jsx13(SteppedComponent, __spreadProps(__spreadValues({}, restProps), { numSteps: 1, children }));
};
var Stepper = (props) => {
  const _a = props, {
    values,
    render: renderFn,
    children: renderChildrenFn,
    alwaysVisible = false
  } = _a, restProps = __objRest(_a, [
    "values",
    "render",
    "children",
    "alwaysVisible"
  ]);
  if (renderFn !== void 0 && renderChildrenFn !== void 0) {
    throw new Error(
      "<Stepper> component specified both `render` prop and a render function as its `children`."
    );
  }
  return /* @__PURE__ */ jsx13(
    SteppedComponent,
    __spreadProps(__spreadValues({}, restProps), {
      numSteps: values.length,
      alwaysAppearActive: alwaysVisible,
      children: (step, isActive) => (renderFn || renderChildrenFn)(values[step], step, isActive)
    })
  );
};

// src/components/code-pane.tsx
import {
  forwardRef as forwardRef2,
  useMemo as useMemo4,
  useContext as useContext4,
  useRef as useRef9,
  useCallback as useCallback10,
  useEffect as useEffect13
} from "react";
import { Prism as SyntaxHighlighter } from "react-syntax-highlighter";

// src/utils/indent-normalizer.ts
var indentNormalizer = (val) => {
  let prefix = null;
  return (val || "").split("\n").filter((line) => {
    const [cur, remainder] = (line.match(/^([ ]*)([^ ]+)/) || []).slice(1);
    return remainder ? (prefix = null === prefix || cur.length < prefix.length ? cur : prefix, true) : null !== prefix;
  }).map((line) => prefix ? line.replace(prefix, "") : line).join("\n").trimRight();
};
var indent_normalizer_default = indentNormalizer;

// src/components/code-pane.tsx
import styled12, { ThemeContext as ThemeContext2 } from "styled-components";
import { compose as compose3, layout as layout2, position as position2 } from "styled-system";
import vsDark from "react-syntax-highlighter/dist/cjs/styles/prism/vs-dark.js";
import * as allThemes from "react-syntax-highlighter/dist/cjs/styles/prism/index.js";
import { Fragment as Fragment5, jsx as jsx14, jsxs as jsxs10 } from "react/jsx-runtime";
var vsDarkTheme = vsDark.default || vsDark;
var codePaneThemes = __spreadValues({ vsDark: vsDarkTheme }, allThemes);
var checkForNumberValues = (ranges) => {
  return ranges.every((element) => typeof element === "number");
};
var checkForInvalidValues = (ranges) => {
  return ranges.every((element) => element === null || element === void 0);
};
var getRangeFormat = (numberOfSteps, highlightRanges, step) => {
  if (numberOfSteps === 1) {
    return highlightRanges;
  }
  if (highlightRanges[step] === null || highlightRanges[step] === void 0) {
    return [];
  }
  if (typeof highlightRanges[step] === "number") {
    return [highlightRanges[step]];
  }
  return highlightRanges[step];
};
var getStyleForLineNumber = (lineNumber, activeRange) => {
  const isOneLineNumber = activeRange.length === 1;
  if (isOneLineNumber) {
    const [activeLineNumber] = activeRange;
    if (activeLineNumber === lineNumber) {
      return { opacity: 1 };
    } else {
      return { opacity: 0.5 };
    }
  }
  const [from, to] = activeRange;
  return { opacity: from <= lineNumber && lineNumber <= to ? 1 : 0.5 };
};
var Container = styled12("div")(compose3(position2, layout2));
var CodePane = forwardRef2(
  (_a, ref) => {
    var _b = _a, {
      highlightRanges = [],
      language,
      showLineNumbers = true,
      children: rawCodeString,
      stepIndex,
      theme: syntaxTheme = codePaneThemes.vsDark
    } = _b, props = __objRest(_b, [
      "highlightRanges",
      "language",
      "showLineNumbers",
      "children",
      "stepIndex",
      "theme"
    ]);
    const numberOfSteps = useMemo4(() => {
      if (highlightRanges.length === 0 || // Prevents e.g. [null, null] to be used to count the number of steps
      checkForInvalidValues(highlightRanges)) {
        return 0;
      }
      const isSingleRange = highlightRanges.length <= 2 && // Prevents e.g. [3, [5]] from being considered a single array range
      checkForNumberValues(highlightRanges);
      if (isSingleRange) {
        return 1;
      }
      return highlightRanges.length;
    }, [highlightRanges]);
    const theme = useContext4(ThemeContext2);
    const { isActive, step, placeholder } = useSteps(numberOfSteps, {
      stepIndex
    });
    const children = useMemo4(() => {
      return indent_normalizer_default(rawCodeString);
    }, [rawCodeString]);
    const scrollTarget = useRef9(null);
    const getLineNumberStyle = useCallback10(
      (lineNumber) => {
        if (!isActive)
          return {};
        const range = getRangeFormat(numberOfSteps, highlightRanges, step);
        return getStyleForLineNumber(lineNumber, range);
      },
      [isActive, highlightRanges, numberOfSteps, step]
    );
    const getLineProps = useCallback10(
      (lineNumber) => {
        if (!isActive)
          return {};
        const range = getRangeFormat(numberOfSteps, highlightRanges, step);
        return {
          ref: lineNumber === range[0] ? scrollTarget : null,
          style: getStyleForLineNumber(lineNumber, range)
        };
      },
      [isActive, highlightRanges, numberOfSteps, step]
    );
    useEffect13(() => {
      window.requestAnimationFrame(() => {
        if (!scrollTarget.current)
          return;
        scrollTarget.current.scrollIntoView({
          block: "center",
          behavior: "smooth"
        });
      });
    }, [isActive, step]);
    const customStyle = useMemo4(() => {
      const {
        space: space5 = [0, 0, 0],
        fontSizes: { monospace = "20px" }
      } = theme;
      return {
        padding: space5[0],
        margin: 0,
        fontSize: monospace
      };
    }, [theme]);
    return /* @__PURE__ */ jsxs10(Fragment5, { children: [
      placeholder,
      /* @__PURE__ */ jsx14(Container, __spreadProps(__spreadValues({ ref }, props), { children: /* @__PURE__ */ jsx14(
        SyntaxHighlighter,
        {
          customStyle,
          language,
          wrapLines: true,
          showLineNumbers,
          lineProps: getLineProps,
          lineNumberStyle: getLineNumberStyle,
          style: syntaxTheme,
          children
        }
      ) }))
    ] });
  }
);
CodePane.displayName = "CodePane";
var code_pane_default = CodePane;

// src/components/table.tsx
import styled13 from "styled-components";
import {
  color as color4,
  typography as typography2,
  space as space4,
  compose as compose4,
  border as border2,
  layout as layout3
} from "styled-system";
var Table = styled13.table(
  compose4(color4, typography2, space4, border2, layout3)
);
Table.defaultProps = {
  color: "primary",
  fontFamily: "text",
  fontSize: "text",
  textAlign: "left",
  margin: "listMargin",
  width: 1
};
var TableHeader = styled13.thead(
  compose4(color4, typography2, space4, border2, layout3)
);
TableHeader.defaultProps = {
  color: "primary",
  fontFamily: "text",
  fontSize: "text",
  fontWeight: "bold",
  textAlign: "left",
  margin: "listMargin"
};
var TableBody = styled13.tbody(
  compose4(color4, typography2, space4, border2, layout3)
);
TableBody.defaultProps = {
  color: "primary",
  fontFamily: "text",
  fontSize: "text",
  textAlign: "left",
  margin: "listMargin",
  width: 1
};
var TableRow = styled13.tr(
  compose4(color4, typography2, space4, border2, layout3)
);
TableRow.defaultProps = {
  color: "primary",
  fontFamily: "text",
  fontSize: "text",
  textAlign: "left",
  margin: "listMargin"
};
var TableCell = styled13.td(
  compose4(color4, typography2, space4, border2, layout3)
);
TableCell.defaultProps = {
  color: "primary",
  fontFamily: "text",
  fontSize: "text",
  textAlign: "left",
  margin: "listMargin"
};

// src/components/image.ts
import styled14 from "styled-components";
import { compose as compose5, layout as layout4, position as position3 } from "styled-system";
var Image = styled14.img(compose5(layout4, position3));
var FullSizeImage = styled14(Image);
FullSizeImage.defaultProps = {
  maxWidth: "100%",
  maxHeight: "100%"
};

// src/components/notes.tsx
import ReactDOM2 from "react-dom";
import { useContext as useContext5 } from "react";
import { jsx as jsx15 } from "react/jsx-runtime";
var Notes = ({ children }) => {
  const { notePortalNode } = useContext5(DeckContext);
  const { isSlideActive } = useContext5(SlideContext);
  if (!isSlideActive)
    return null;
  if (!notePortalNode)
    return null;
  return ReactDOM2.createPortal(/* @__PURE__ */ jsx15("div", { children }), notePortalNode);
};
var notes_default = Notes;

// src/components/progress.tsx
import { forwardRef as forwardRef3, useContext as useContext6 } from "react";
import styled15 from "styled-components";
import { position as position4 } from "styled-system";
import { jsx as jsx16 } from "react/jsx-runtime";
var DEFAULT_PROGRESS_CIRCLE_SIZE = 10;
var PROGRESS_CIRCLE_BORDER_WIDTH = 1;
var PROGRESS_CIRCLE_MARGIN = DEFAULT_PROGRESS_CIRCLE_SIZE / 3;
var DEFAULT_PROGRESS_CIRCLE_WIDTH_INCLUDING_MARGIN = DEFAULT_PROGRESS_CIRCLE_SIZE + (PROGRESS_CIRCLE_BORDER_WIDTH + PROGRESS_CIRCLE_MARGIN) * 2;
var Circle = styled15.div`
  width: ${({ size }) => size}px;
  height: ${({ size }) => size}px;
  border: ${PROGRESS_CIRCLE_BORDER_WIDTH}px solid ${({ color: color5 }) => color5};
  background: ${({ color: color5, active }) => active ? color5 : "transparent"};
  margin: ${({ margin }) => margin}px;
  border-radius: 50%;
  pointer-events: all;
  cursor: pointer;
`;
var ProgressContainer = styled15.div`
  ${position4}
  display: flex;
  flex-wrap: wrap;
  @media print {
    display: none;
  }
`;
var Progress = forwardRef3(
  (_a, ref) => {
    var _b = _a, { color: color5 = "#fff", size = DEFAULT_PROGRESS_CIRCLE_SIZE } = _b, props = __objRest(_b, ["color", "size"]);
    const { slideCount, skipTo, activeView } = useContext6(DeckContext);
    return /* @__PURE__ */ jsx16(
      ProgressContainer,
      __spreadProps(__spreadValues({
        ref,
        className: "spectacle-progress-indicator"
      }, props), {
        children: Array(slideCount).fill(0).map((_, idx) => /* @__PURE__ */ jsx16(
          Circle,
          {
            color: color5,
            active: activeView.slideIndex === idx,
            size,
            margin: PROGRESS_CIRCLE_MARGIN,
            onClick: () => skipTo({
              slideIndex: idx,
              stepIndex: 0
            }),
            "data-testid": "Progress Circle"
          },
          `progress-circle-${idx}`
        ))
      })
    );
  }
);
Progress.displayName = "Progress";
var progress_default = Progress;

// src/components/animated-progress.tsx
import {
  forwardRef as forwardRef4,
  useContext as useContext7,
  useEffect as useEffect14,
  useState as useState10,
  useCallback as useCallback11
} from "react";
import styled16, { keyframes } from "styled-components";
import { jsx as jsx17, jsxs as jsxs11 } from "react/jsx-runtime";
var PacmanBase = styled16.div`
  position: absolute;
  top: ${({ top }) => top}px;
  left: ${({ left }) => left}px;
  height: ${({ pacmanSize }) => pacmanSize}px;
  width: ${({ pacmanSize }) => pacmanSize}px;
  transition: left 0.3s ease-in-out 0.2s;
  transform: translate(-50%, -50%);
`;
var pacmanTopFrames = keyframes`
  0% { transform: rotateZ(0deg) }
  100% { transform: rotateZ(-30deg) }
`;
var pacmanBottomFrames = keyframes`
  0% { transform: rotateZ(0deg) }
  100% { transform: rotateZ(30deg) }
`;
var pacmanTopFramesAlternate = keyframes`
  0% { transform: rotateZ(0.1deg) }
  100% { transform: rotateZ(-30deg) }
`;
var pacmanBottomFramesAlternate = keyframes`
  0% { transform: rotateZ(0.1deg) }
  100% { transform: rotateZ(30deg) }
`;
var PacmanBodyTop = styled16.div`
  position: absolute;
  top: 0;
  height: ${({ pacmanSize }) => pacmanSize / 2}px;
  width: ${({ pacmanSize }) => pacmanSize}px;
  background: ${({ color: color5 }) => color5};
  border-top-left-radius: ${({ pacmanSize }) => pacmanSize / 2}px;
  border-top-right-radius: ${({ pacmanSize }) => pacmanSize / 2}px;
  // NOTE: So the top and bottom always overlap when sizes are in decimals.
  box-shadow: 0 0 0 0.5px ${({ color: color5 }) => color5};
  animation-name: ${({ alternate }) => alternate ? pacmanTopFrames : pacmanTopFramesAlternate};
  animation-duration: 0.12s;
  animation-timing-function: linear;
  animation-iteration-count: 10;
  animation-direction: alternate;
  animation-fill-mode: both;
`;
var PacmanBodyBottom = styled16(PacmanBodyTop)`
  top: 50%;
  border-top-left-radius: 0;
  border-top-right-radius: 0;
  border-bottom-left-radius: ${({ pacmanSize }) => pacmanSize / 2}px;
  border-bottom-right-radius: ${({ pacmanSize }) => pacmanSize / 2}px;
  animation-name: ${({ alternate }) => alternate ? pacmanBottomFrames : pacmanBottomFramesAlternate};
`;
var DEFAULT_ANIMATED_PROGRESS_CIRCLE_SIZE = 7.5;
var AnimatedProgress = forwardRef4(
  (_a, ref) => {
    var _b = _a, {
      color: circleColor = "#fff",
      size: circleSize = DEFAULT_ANIMATED_PROGRESS_CIRCLE_SIZE
    } = _b, props = __objRest(_b, [
      "color",
      "size"
    ]);
    const {
      slideCount,
      skipTo,
      activeView: { slideIndex }
    } = useContext7(DeckContext);
    const [pacmanOffsetLeft, setPacmanOffsetLeft] = useState10(
      null
    );
    const [pacmanOffsetTop, setPacmanOffsetTop] = useState10(null);
    const [alternateAnimation, setAlternateAnimation] = useState10(false);
    const [activeCircleNode, setActiveCircleNode] = useState10(null);
    const activeCircleCallbackRef = useCallback11(
      (activeCircleNode2) => {
        setActiveCircleNode(activeCircleNode2);
      },
      []
    );
    useEffect14(() => {
      if (activeCircleNode == null ? void 0 : activeCircleNode.offsetParent) {
        const { offsetLeft, offsetTop } = activeCircleNode;
        const halfOfCircleOccupiedSpace = circleSize / 2 + PROGRESS_CIRCLE_BORDER_WIDTH;
        setPacmanOffsetLeft(offsetLeft + halfOfCircleOccupiedSpace);
        setPacmanOffsetTop(offsetTop + halfOfCircleOccupiedSpace);
        setAlternateAnimation((alternateAnimation2) => !alternateAnimation2);
      } else {
        setPacmanOffsetLeft(null);
        setPacmanOffsetTop(null);
      }
    }, [circleSize, activeCircleNode]);
    const circleMargin = (DEFAULT_PROGRESS_CIRCLE_WIDTH_INCLUDING_MARGIN - DEFAULT_ANIMATED_PROGRESS_CIRCLE_SIZE - PROGRESS_CIRCLE_BORDER_WIDTH * 2) / 2;
    const pacmanColor = props.pacmanColor || circleColor;
    const pacmanSize = circleSize + PROGRESS_CIRCLE_BORDER_WIDTH + circleMargin * 2;
    return /* @__PURE__ */ jsxs11(ProgressContainer, __spreadProps(__spreadValues({ ref, position: "relative" }, props), { children: [
      typeof pacmanOffsetTop === "number" && typeof pacmanOffsetLeft === "number" && /* @__PURE__ */ jsxs11(
        PacmanBase,
        {
          pacmanSize,
          top: pacmanOffsetTop,
          left: pacmanOffsetLeft,
          children: [
            /* @__PURE__ */ jsx17(
              PacmanBodyTop,
              {
                color: pacmanColor,
                pacmanSize,
                alternate: alternateAnimation
              }
            ),
            /* @__PURE__ */ jsx17(
              PacmanBodyBottom,
              {
                color: pacmanColor,
                pacmanSize,
                alternate: alternateAnimation
              }
            )
          ]
        }
      ),
      Array(slideCount).fill(0).map((_, idx) => /* @__PURE__ */ jsx17(
        Circle,
        {
          ref: slideIndex === idx ? activeCircleCallbackRef : null,
          color: circleColor,
          active: false,
          size: circleSize,
          margin: circleMargin,
          onClick: () => skipTo({
            slideIndex: idx,
            stepIndex: 0
          }),
          "data-testid": "animated-progress-circle"
        },
        idx
      ))
    ] }));
  }
);
AnimatedProgress.displayName = "AnimatedProgress";
var animated_progress_default = AnimatedProgress;

// src/components/fullscreen.tsx
import { forwardRef as forwardRef5, useEffect as useEffect15, useState as useState11 } from "react";
import styled17 from "styled-components";
import { position as position5 } from "styled-system";

// src/hooks/use-full-screen.ts
import { useCallback as useCallback12 } from "react";
var useToggleFullScreen = () => useCallback12(() => {
  if (typeof document === "undefined") {
    return;
  }
  if ("requestFullscreen" in document.documentElement) {
    if (!document.fullscreenElement) {
      document.documentElement.requestFullscreen();
    } else {
      document.exitFullscreen();
    }
  } else if ("webkitRequestFullScreen" in document.documentElement) {
    if (!document.webkitIsFullScreen) {
      document.documentElement.webkitRequestFullScreen();
    } else {
      document.webkitCancelFullScreen();
    }
  }
}, []);

// src/components/fullscreen.tsx
import { jsx as jsx18 } from "react/jsx-runtime";
var Container2 = styled17("div")`
  ${position5}
  @media print {
    display: none;
  }
`;
var FullScreen = forwardRef5(
  (_a, ref) => {
    var _b = _a, { size, color: color5 } = _b, props = __objRest(_b, ["size", "color"]);
    const toggleFullScreen = useToggleFullScreen();
    const [isClient, setIsClient] = useState11(false);
    useEffect15(() => {
      setIsClient(true);
    }, []);
    if (!isClient)
      return null;
    return /* @__PURE__ */ jsx18(
      Container2,
      __spreadProps(__spreadValues({
        ref,
        className: "spectacle-fullscreen-button",
        onClick: toggleFullScreen,
        style: { pointerEvents: "all" }
      }, props), {
        children: /* @__PURE__ */ jsx18("svg", { width: size, height: size, viewBox: "0 0 512 512", children: /* @__PURE__ */ jsx18(
          "path",
          {
            fill: color5,
            d: !!document.fullscreenElement || document.webkitIsFullScreen ? "M64 371.2h76.795V448H192V320H64v51.2zm76.795-230.4H64V192h128V64h-51.205v76.8zM320 448h51.2v-76.8H448V320H320v128zm51.2-307.2V64H320v128h128v-51.2h-76.8z" : "M396.795 396.8H320V448h128V320h-51.205zM396.8 115.205V192H448V64H320v51.205zM115.205 115.2H192V64H64v128h51.205zM115.2 396.795V320H64v128h128v-51.205z"
          }
        ) })
      })
    );
  }
);
FullScreen.displayName = "Fullscreen";
FullScreen.defaultProps = {
  color: "#fff",
  size: 24
};
var fullscreen_default = FullScreen;

// src/components/slide-layout.tsx
import styled18 from "styled-components";
import { Fragment as Fragment6 } from "react";
import { jsx as jsx19, jsxs as jsxs12 } from "react/jsx-runtime";
var Full = (_a) => {
  var _b = _a, { children } = _b, rest = __objRest(_b, ["children"]);
  return /* @__PURE__ */ jsx19(slide_default, __spreadProps(__spreadValues({}, rest), { children }));
};
var Center = (_a) => {
  var _b = _a, { children } = _b, rest = __objRest(_b, ["children"]);
  return /* @__PURE__ */ jsx19(slide_default, __spreadProps(__spreadValues({}, rest), { children: /* @__PURE__ */ jsx19(FlexBox, { justifyContent: "center", alignItems: "center", height: "100%", children: /* @__PURE__ */ jsx19(Box, { children }) }) }));
};
var TwoColumn = (_a) => {
  var _b = _a, {
    left,
    right
  } = _b, rest = __objRest(_b, [
    "left",
    "right"
  ]);
  return /* @__PURE__ */ jsx19(slide_default, __spreadProps(__spreadValues({}, rest), { children: /* @__PURE__ */ jsxs12(FlexBox, { flexDirection: "row", alignItems: "start", flex: 1, children: [
    /* @__PURE__ */ jsx19(Box, { width: "100%", children: left }),
    /* @__PURE__ */ jsx19(Box, { width: "100%", children: right })
  ] }) }));
};
var Ul = ({
  items = [],
  type = "unordered",
  animate = false,
  listProps
}) => {
  const List2 = type === "unordered" ? UnorderedList : OrderedList;
  return /* @__PURE__ */ jsx19(List2, __spreadProps(__spreadValues({}, listProps), { children: items.map((item, i) => {
    const Wrapper = animate ? Appear : Fragment6;
    return /* @__PURE__ */ jsx19(Wrapper, { children: /* @__PURE__ */ jsx19(ListItem, { children: item }, i) }, i);
  }) }));
};
var List = (_a) => {
  var _b = _a, {
    title,
    items,
    listType = "unordered",
    animateListItems = false,
    titleProps,
    listProps
  } = _b, rest = __objRest(_b, [
    "title",
    "items",
    "listType",
    "animateListItems",
    "titleProps",
    "listProps"
  ]);
  return /* @__PURE__ */ jsxs12(slide_default, __spreadProps(__spreadValues({}, rest), { children: [
    title ? /* @__PURE__ */ jsx19(Heading, __spreadProps(__spreadValues({ textAlign: "left" }, titleProps), { children: title })) : null,
    /* @__PURE__ */ jsx19(
      Ul,
      {
        items,
        animate: animateListItems,
        type: listType,
        listProps
      }
    )
  ] }));
};
var Header = (_a) => {
  var _b = _a, {
    flexBoxProps,
    headingProps,
    children
  } = _b, rest = __objRest(_b, [
    "flexBoxProps",
    "headingProps",
    "children"
  ]);
  return /* @__PURE__ */ jsx19(slide_default, __spreadProps(__spreadValues({}, rest), { children: /* @__PURE__ */ jsx19(FlexBox, __spreadProps(__spreadValues({ height: "100%" }, flexBoxProps), { children: /* @__PURE__ */ jsx19(Heading, __spreadProps(__spreadValues({}, headingProps), { children })) })) }));
};
var Section = ({
  sectionProps,
  children
}) => /* @__PURE__ */ jsx19(
  Header,
  {
    headingProps: sectionProps,
    flexBoxProps: { justifyContent: "flex-start" },
    children
  }
);
var Statement = ({
  statementProps,
  children
}) => /* @__PURE__ */ jsx19(Header, { headingProps: statementProps, children });
var BigFact = (_a) => {
  var _b = _a, {
    children,
    factInformation,
    factProps,
    factFontSize = "250px",
    factInformationProps
  } = _b, rest = __objRest(_b, [
    "children",
    "factInformation",
    "factProps",
    "factFontSize",
    "factInformationProps"
  ]);
  return /* @__PURE__ */ jsx19(slide_default, __spreadProps(__spreadValues({}, rest), { children: /* @__PURE__ */ jsx19(FlexBox, { children: /* @__PURE__ */ jsxs12(Box, { children: [
    /* @__PURE__ */ jsx19(Text, __spreadProps(__spreadValues({ textAlign: "center", fontSize: factFontSize }, factProps), { children })),
    factInformation ? /* @__PURE__ */ jsx19(Text, __spreadProps(__spreadValues({ textAlign: "center" }, factInformationProps), { children: factInformation })) : null
  ] }) }) }));
};
var Quote2 = (_a) => {
  var _b = _a, {
    children,
    quoteProps,
    attribution,
    attributionProps
  } = _b, rest = __objRest(_b, [
    "children",
    "quoteProps",
    "attribution",
    "attributionProps"
  ]);
  return /* @__PURE__ */ jsx19(slide_default, __spreadProps(__spreadValues({}, rest), { children: /* @__PURE__ */ jsxs12(Box, { width: "100%", margin: "auto", children: [
    /* @__PURE__ */ jsx19(Text, __spreadProps(__spreadValues({ fontSize: "85px" }, quoteProps), { children })),
    /* @__PURE__ */ jsxs12(Text, __spreadProps(__spreadValues({ fontSize: "36px", padding: "0em 0em 0em 1em" }, attributionProps), { children: [
      "\u2013",
      attribution
    ] }))
  ] }) }));
};
var CodeLayout = (_a) => {
  var _b = _a, {
    text: text3,
    textProps,
    children
  } = _b, props = __objRest(_b, [
    "text",
    "textProps",
    "children"
  ]);
  return /* @__PURE__ */ jsxs12(Box, { "data-testid": "CodePane", children: [
    text3 ? /* @__PURE__ */ jsx19(Text, __spreadProps(__spreadValues({ margin: 8 }, textProps), { children: text3 })) : null,
    /* @__PURE__ */ jsx19(code_pane_default, __spreadProps(__spreadValues({}, props), { children }))
  ] });
};
var Code = (_a) => {
  var _b = _a, {
    children,
    language,
    title,
    titleProps,
    codePaneProps
  } = _b, rest = __objRest(_b, [
    "children",
    "language",
    "title",
    "titleProps",
    "codePaneProps"
  ]);
  return /* @__PURE__ */ jsx19(slide_default, __spreadProps(__spreadValues({}, rest), { children: /* @__PURE__ */ jsxs12(Box, { display: "inline-block", style: { overflow: "scroll" }, children: [
    title ? /* @__PURE__ */ jsx19(Heading, __spreadProps(__spreadValues({}, titleProps), { children: title })) : null,
    /* @__PURE__ */ jsx19(CodeLayout, __spreadProps(__spreadValues({ language }, codePaneProps), { children }))
  ] }) }));
};
var MultiCodeLayout = (_a) => {
  var _b = _a, {
    codeBlocks,
    title,
    titleProps,
    numColumns = 1
  } = _b, rest = __objRest(_b, [
    "codeBlocks",
    "title",
    "titleProps",
    "numColumns"
  ]);
  return /* @__PURE__ */ jsx19(slide_default, __spreadProps(__spreadValues({}, rest), { children: /* @__PURE__ */ jsxs12(Box, { display: "inline-block", style: { overflow: "scroll" }, children: [
    title ? /* @__PURE__ */ jsx19(Heading, __spreadProps(__spreadValues({}, titleProps), { children: title })) : null,
    /* @__PURE__ */ jsx19(
      Grid,
      {
        gridRowGap: 1,
        gridColumnGap: 1,
        gridTemplateColumns: `repeat(${numColumns}, minmax(100px, 1fr))`,
        maxWidth: "100%",
        children: codeBlocks.map(
          (_a2, i) => {
            var _b2 = _a2, { description, descriptionProps, code } = _b2, codePaneProps = __objRest(_b2, ["description", "descriptionProps", "code"]);
            return /* @__PURE__ */ jsx19(
              CodeLayout,
              __spreadProps(__spreadValues({
                text: description,
                textProps: descriptionProps
              }, codePaneProps), {
                children: code
              }),
              i
            );
          }
        )
      }
    )
  ] }) }));
};
var Img = styled18.img`
  min-width: 100%;
  min-height: 100%;
  max-width: 100%;
  object-fit: ${(props) => props.objectFit || "contain"};
`;
var ImgContainer = styled18(FlexBox)`
  overflow: hidden;
`;
var Image2 = ({
  src,
  alt = "",
  imgContainerProps,
  imgProps,
  objectFit
}) => /* @__PURE__ */ jsx19(ImgContainer, __spreadProps(__spreadValues({ "data-testid": "ImgContainer" }, imgContainerProps), { children: /* @__PURE__ */ jsx19(
  Img,
  __spreadValues({
    "data-testid": "Img",
    src,
    alt,
    objectFit
  }, imgProps)
) }));
var HorizontalImage = (_a) => {
  var _b = _a, {
    src,
    alt,
    title,
    titleProps,
    description,
    descriptionProps,
    imgProps,
    imgContainerProps,
    objectFit
  } = _b, rest = __objRest(_b, [
    "src",
    "alt",
    "title",
    "titleProps",
    "description",
    "descriptionProps",
    "imgProps",
    "imgContainerProps",
    "objectFit"
  ]);
  return /* @__PURE__ */ jsxs12(slide_default, __spreadProps(__spreadValues({}, rest), { children: [
    /* @__PURE__ */ jsx19(
      Image2,
      {
        src,
        alt,
        objectFit,
        imgContainerProps: __spreadValues({
          width: "100%"
        }, imgContainerProps),
        imgProps
      }
    ),
    title ? /* @__PURE__ */ jsx19(Heading, __spreadProps(__spreadValues({ textAlign: "left", margin: "0 0" }, titleProps), { children: title })) : null,
    description ? /* @__PURE__ */ jsx19(Text, __spreadProps(__spreadValues({ margin: "0 0" }, descriptionProps), { children: description })) : null
  ] }));
};
var VerticalImage = (_a) => {
  var _b = _a, {
    src,
    alt,
    title,
    titleProps,
    listType = "unordered",
    listItems,
    animateListItems = false,
    listProps,
    imgProps,
    imgContainerProps,
    position: position7 = "left",
    objectFit
  } = _b, rest = __objRest(_b, [
    "src",
    "alt",
    "title",
    "titleProps",
    "listType",
    "listItems",
    "animateListItems",
    "listProps",
    "imgProps",
    "imgContainerProps",
    "position",
    "objectFit"
  ]);
  return /* @__PURE__ */ jsxs12(slide_default, __spreadProps(__spreadValues({}, rest), { children: [
    title ? /* @__PURE__ */ jsx19(Heading, __spreadProps(__spreadValues({}, titleProps), { children: title })) : null,
    /* @__PURE__ */ jsxs12(
      Grid,
      {
        gridColumnGap: 2,
        gridTemplateColumns: "repeat(2, 1fr)",
        height: "100%",
        children: [
          /* @__PURE__ */ jsx19(FlexBox, { justifyContent: "start", children: /* @__PURE__ */ jsx19(
            Ul,
            __spreadValues({
              items: listItems,
              animate: animateListItems,
              type: listType
            }, listProps)
          ) }),
          /* @__PURE__ */ jsx19(
            Image2,
            {
              src,
              alt,
              objectFit,
              imgContainerProps: __spreadValues({
                order: position7 === "right" ? 1 : -1
              }, imgContainerProps),
              imgProps
            }
          )
        ]
      }
    )
  ] }));
};
var ThreeUpImage = (_a) => {
  var _b = _a, {
    primary,
    top,
    bottom
  } = _b, rest = __objRest(_b, [
    "primary",
    "top",
    "bottom"
  ]);
  return /* @__PURE__ */ jsx19(slide_default, __spreadProps(__spreadValues({}, rest), { children: /* @__PURE__ */ jsxs12(
    Grid,
    {
      height: "100%",
      gridColumnGap: 2,
      gridTemplateColumns: "repeat(2, 1fr)",
      children: [
        /* @__PURE__ */ jsxs12(Grid, { gridRowGap: 2, gridTemplateRows: "repeat(2, .5fr)", children: [
          /* @__PURE__ */ jsx19(
            Image2,
            {
              src: top.src,
              alt: top.alt,
              objectFit: top.objectFit,
              imgProps: top.imgProps,
              imgContainerProps: __spreadValues({}, top.imgContainerProps)
            }
          ),
          /* @__PURE__ */ jsx19(
            Image2,
            {
              src: bottom.src,
              alt: bottom.alt,
              objectFit: bottom.objectFit,
              imgProps: bottom.imgProps,
              imgContainerProps: __spreadValues({}, bottom.imgContainerProps)
            }
          )
        ] }),
        /* @__PURE__ */ jsx19(
          Image2,
          {
            src: primary.src,
            alt: primary.alt,
            objectFit: primary.objectFit,
            imgProps: primary.imgProps,
            imgContainerProps: __spreadValues({
              order: primary.position === "right" ? 1 : -1
            }, primary.imgContainerProps)
          }
        )
      ]
    }
  ) }));
};
var FullBleedImage = (_a) => {
  var _b = _a, {
    src,
    alt,
    imgProps,
    imgContainerProps,
    objectFit
  } = _b, rest = __objRest(_b, [
    "src",
    "alt",
    "imgProps",
    "imgContainerProps",
    "objectFit"
  ]);
  return /* @__PURE__ */ jsx19(slide_default, __spreadProps(__spreadValues({ padding: "0 0 0" }, rest), { children: /* @__PURE__ */ jsx19(
    Image2,
    {
      src,
      alt,
      objectFit: objectFit || "cover",
      imgProps,
      imgContainerProps: __spreadValues({
        height: "100%"
      }, imgContainerProps)
    }
  ) }));
};
var slide_layout_default = {
  Full,
  Center,
  TwoColumn,
  List,
  Section,
  BigFact,
  Quote: Quote2,
  Statement,
  Code,
  MultiCodeLayout,
  HorizontalImage,
  VerticalImage,
  ThreeUpImage,
  FullBleedImage
};

// src/components/default-template.tsx
import { jsx as jsx20, jsxs as jsxs13 } from "react/jsx-runtime";
var DefaultTemplate = ({ color: color5 = "#fff" }) => /* @__PURE__ */ jsxs13(
  FlexBox,
  {
    justifyContent: "space-between",
    position: "absolute",
    bottom: 0,
    width: 1,
    children: [
      /* @__PURE__ */ jsx20(Box, { padding: "0 1em", children: /* @__PURE__ */ jsx20(fullscreen_default, { color: color5 }) }),
      /* @__PURE__ */ jsx20(Box, { padding: "1em", children: /* @__PURE__ */ jsx20(animated_progress_default, { color: color5 }) })
    ]
  }
);

// src/utils/remark-rehype-presenter-notes.ts
import zone from "mdast-zone";
import unistVisit from "unist-util-visit";
import * as mdast from "mdast-builder";
function remarkRehypePresenterNotes(noteCallback) {
  const transformZoneNote = (start, nodes) => {
    noteCallback(...nodes);
    return [];
  };
  const transformLineNote = (node, index, parent) => {
    if (node.children.length === 0)
      return;
    if (node.children[0].type !== "text")
      return;
    const text3 = node.children[0];
    const match = /^Notes: (.*)$/.exec(text3.value);
    if (!match)
      return;
    noteCallback(mdast.paragraph(mdast.text(match[1])));
    parent.children.splice(index, 1);
  };
  return (tree) => {
    zone(tree, "notes", transformZoneNote);
    unistVisit(tree, "paragraph", transformLineNote);
  };
}

// src/components/markdown/markdown.tsx
import unified from "unified";
import styled19 from "styled-components";
import { compose as compose6, layout as layout5, position as position6 } from "styled-system";
import remark from "remark-parse";
import remark2rehype from "remark-rehype";
import remarkRaw from "rehype-raw";
import rehype2react from "rehype-react";
import { isValidElementType } from "react-is";
import { root as mdRoot } from "mdast-builder";

// src/utils/mdx-component-mapper.tsx
import { jsx as jsx21 } from "react/jsx-runtime";
var mdxComponentMap = {
  p: Text,
  h1: (props) => /* @__PURE__ */ jsx21(Heading, __spreadProps(__spreadValues({}, props), { fontSize: "h1" })),
  h2: (props) => /* @__PURE__ */ jsx21(Heading, __spreadProps(__spreadValues({}, props), { fontSize: "h2" })),
  h3: (props) => /* @__PURE__ */ jsx21(Heading, __spreadProps(__spreadValues({}, props), { fontSize: "h3" })),
  h4: (props) => /* @__PURE__ */ jsx21(Heading, __spreadProps(__spreadValues({}, props), { fontSize: "h4" })),
  blockquote: Quote,
  ul: UnorderedList,
  ol: OrderedList,
  li: ListItem,
  img: Image,
  a: Link,
  table: Table,
  tr: TableRow,
  td: TableCell
};
var mdx_component_mapper_default = mdxComponentMap;

// src/components/markdown/markdown.tsx
import React, {
  forwardRef as forwardRef6,
  useContext as useContext8,
  useMemo as useMemo5,
  createElement,
  Children
} from "react";

// src/utils/separate-sections-from-json.ts
var separateSectionsFromJson = (json) => {
  if (!json || json.trim().length === 0)
    return [];
  const sections = [];
  const lines = json.split("\n");
  let currentSection = {
    content: ""
  };
  for (const line of lines) {
    const trimmedLine = line.trim();
    if (trimmedLine.startsWith("---")) {
      if (currentSection.content !== "") {
        sections.push(currentSection);
      }
      const jsonContent = trimmedLine.substring(3).trim();
      const jsonObject = jsonContent ? JSON.parse(jsonContent) : void 0;
      currentSection = {
        content: "",
        jsonObject
      };
    } else {
      currentSection.content += line + "\n";
    }
  }
  sections.push(currentSection);
  return sections;
};

// src/components/markdown/markdown-layout-containers.tsx
import { jsx as jsx22 } from "react/jsx-runtime";
var Columns = ({ children }) => /* @__PURE__ */ jsx22(FlexBox, { flexDirection: "row", alignItems: "start", flex: 1, children });
var Center2 = ({ children }) => /* @__PURE__ */ jsx22(FlexBox, { justifyContent: "center", alignItems: "center", height: "100%", children });
var hasLayoutConfig = (layoutKey) => (config) => config && "layout" in config && config.layout === layoutKey;

// src/components/markdown/markdown-slide-renderer.tsx
import { jsx as jsx23 } from "react/jsx-runtime";
var MarkdownSlide = (_a) => {
  var _b = _a, {
    children,
    componentMap,
    animateListItems = false,
    componentProps = {},
    slideConfig,
    template: propTemplate
  } = _b, rest = __objRest(_b, [
    "children",
    "componentMap",
    "animateListItems",
    "componentProps",
    "slideConfig",
    "template"
  ]);
  let template = propTemplate;
  if (hasLayoutConfig("columns")(slideConfig))
    template = { default: Columns };
  if (hasLayoutConfig("center")(slideConfig))
    template = { default: Center2 };
  return /* @__PURE__ */ jsx23(slide_default, __spreadProps(__spreadValues({}, rest), { children: /* @__PURE__ */ jsx23(
    Markdown,
    __spreadValues({}, {
      componentMap,
      template,
      animateListItems,
      componentProps,
      children,
      slideConfig
    })
  ) }));
};

// src/utils/remark-rehype-directive.ts
import unistVisit2 from "unist-util-visit";
import * as mdast2 from "mdast-builder";
import visit from "unist-util-visit";
import cloneDeep from "lodash.clonedeep";
var directiveNodeTypes = ["sectionDirective"];
var directiveMatch = /^::(.*)$/;
var cloneFn = typeof structuredClone !== "undefined" ? structuredClone : cloneDeep;
var directiveParserPlugin = () => {
  const transformLineDirective = (node, index, parent) => {
    if (node.children.length === 0)
      return;
    if (node.children[0].type !== "text")
      return;
    const text3 = node.children[0];
    const match = directiveMatch.exec(text3.value);
    if (!match)
      return;
    const matchedNode = mdast2.paragraph(mdast2.text(match[1]));
    const directiveType = `${matchedNode.children[0].value}Directive`;
    if (!directiveNodeTypes.includes(directiveType)) {
      parent == null ? void 0 : parent.children.splice(index, 1);
    } else {
      const directiveNode = {
        type: directiveType,
        children: [],
        position: node.position
      };
      parent == null ? void 0 : parent.children.splice(index, 1, directiveNode);
    }
  };
  return (tree) => {
    unistVisit2(tree, "paragraph", transformLineDirective);
  };
};
var directivesHandlerPlugin = () => {
  return (tree) => {
    const treeChildren = [];
    let slideHasDirectives = false;
    visit(tree, (node) => {
      if (isDirectiveNode(node)) {
        slideHasDirectives = true;
        const treeNodes = tree;
        const clonedNode = cloneFn(node);
        switch (node.type) {
          case "sectionDirective": {
            const startIndex = treeNodes.children.indexOf(node);
            const endIndex = (() => {
              const proposedEndIndex = treeNodes.children.slice(startIndex + 1).findIndex((n) => n.type === "sectionDirective") + startIndex;
              return proposedEndIndex > startIndex ? proposedEndIndex : treeNodes.children.length - 1;
            })();
            const elements = treeNodes.children.slice(
              startIndex + 1,
              endIndex + 1
            );
            clonedNode.children = [...elements];
            treeChildren.push(clonedNode);
          }
        }
      }
    });
    slideHasDirectives && (tree.children = treeChildren);
  };
};
var isDirectiveNode = (node) => directiveNodeTypes.includes(node.type);

// src/components/markdown/markdown.tsx
import { Fragment as Fragment7, jsx as jsx24, jsxs as jsxs14 } from "react/jsx-runtime";
var Container3 = styled19("div")(compose6(position6, layout5), { height: "100%" });
var Markdown = forwardRef6(
  (_a, ref) => {
    var _b = _a, {
      componentMap: userProvidedComponentMap = mdx_component_mapper_default,
      template: { default: TemplateComponent, getPropsForAST } = {
        default: "div"
      },
      children: rawMarkdownText,
      animateListItems = false,
      componentProps,
      slideConfig
    } = _b, props = __objRest(_b, [
      "componentMap",
      "template",
      "children",
      "animateListItems",
      "componentProps",
      "slideConfig"
    ]);
    const { theme: { markdownComponentMap: themeComponentMap = null } = {} } = useContext8(DeckContext);
    const [templateProps, noteElements] = useMemo5(() => {
      const markdownText = indent_normalizer_default(rawMarkdownText);
      const ast = unified().use(remark).parse(markdownText);
      const extractedNotes = mdRoot();
      const transformedAst = unified().use(remarkRehypePresenterNotes, (...notes) => {
        extractedNotes.children.push(...notes);
      }).use(directiveParserPlugin).use(directivesHandlerPlugin).runSync(ast);
      let templatePropMDASTs;
      if (typeof getPropsForAST === "function") {
        templatePropMDASTs = getPropsForAST(transformedAst);
      }
      if (!templatePropMDASTs) {
        templatePropMDASTs = { children: transformedAst };
      }
      const componentMap = __spreadValues(__spreadValues({
        __codeBlock: MarkdownCodePane
      }, themeComponentMap || {}), userProvidedComponentMap);
      if (animateListItems) {
        componentMap["li"] = AppearingListItem;
      }
      const PreComponent = componentMap["pre"];
      const CodeBlockComponent = componentMap["__codeBlock"];
      const CodeInlineComponent = componentMap["code"];
      componentMap["pre"] = MarkdownPreHelper(
        PreComponent,
        CodeInlineComponent,
        CodeBlockComponent
      );
      const componentMapWithPassedThroughProps = Object.entries(
        componentMap
      ).reduce((newMap, [key, Component]) => {
        newMap[key] = (props2) => {
          var _a3;
          const children2 = key === "p" ? (_a3 = props2.children) == null ? void 0 : _a3.map((child) => {
            if (typeof child == "string") {
              const lines = child.split(/\r\n|\n/g);
              return lines.map((str, i) => /* @__PURE__ */ jsxs14(React.Fragment, { children: [
                str,
                i !== lines.length - 1 && /* @__PURE__ */ jsx24("br", {})
              ] }, i));
            }
            return child;
          }) : props2.children;
          return /* @__PURE__ */ jsx24(Component, __spreadProps(__spreadValues(__spreadValues({}, props2), componentProps || {}), { children: children2 }));
        };
        return newMap;
      }, {});
      const compiler = unified().use(remark2rehype, { allowDangerousHtml: true }).use(remarkRaw).use(rehype2react, {
        createElement,
        components: componentMapWithPassedThroughProps
      });
      const templateProps2 = Object.entries(templatePropMDASTs).reduce(
        (acc, [key, mdast3]) => {
          const hast = compiler.runSync(mdast3);
          acc[key] = compiler.stringify(hast);
          return acc;
        },
        {}
      );
      const notesCompiler = unified().use(remark2rehype, { allowDangerousHtml: true }).use(remarkRaw).use(rehype2react, {
        createElement,
        Fragment: notes_default
      });
      if (Array.isArray(extractedNotes.children) && extractedNotes.children.length >= 1) {
        const transformedNotesAst = notesCompiler.runSync(extractedNotes);
        const noteElements2 = notesCompiler.stringify(transformedNotesAst);
        return [templateProps2, noteElements2];
      }
      return [templateProps2, null];
    }, [
      rawMarkdownText,
      getPropsForAST,
      themeComponentMap,
      userProvidedComponentMap,
      animateListItems,
      componentProps
    ]);
    const _a2 = templateProps, { children } = _a2, restProps = __objRest(_a2, ["children"]);
    return /* @__PURE__ */ jsx24(Container3, __spreadProps(__spreadValues({ ref }, props), { children: /* @__PURE__ */ jsxs14(TemplateComponent, __spreadProps(__spreadValues({}, restProps), { children: [
      (slideConfig == null ? void 0 : slideConfig.layout) === "columns" ? children.props.children : children,
      noteElements
    ] })) }));
  }
);
var AppearingListItem = (props) => /* @__PURE__ */ jsx24(Appear, { children: /* @__PURE__ */ jsx24(ListItem, __spreadValues({}, props)) });
var MarkdownSlideSet = (_a) => {
  var _b = _a, {
    children: rawMarkdownText,
    slideProps = []
  } = _b, allSlideProps = __objRest(_b, [
    "children",
    "slideProps"
  ]);
  const dedentedMarkdownText = indent_normalizer_default(rawMarkdownText);
  const mdSlides = separateSectionsFromJson(dedentedMarkdownText);
  return /* @__PURE__ */ jsx24(Fragment7, { children: mdSlides.map((md, ix) => {
    const props = {};
    Object.assign(props, allSlideProps);
    if (slideProps[ix]) {
      Object.assign(props, slideProps[ix]);
    }
    const { jsonObject = {}, content } = md;
    return /* @__PURE__ */ jsx24(MarkdownSlide, __spreadProps(__spreadValues({ slideConfig: jsonObject }, props), { children: content }), ix);
  }) });
};
var MarkdownPreHelper = (PreComponent = "pre", CodeInlineComponent = "code", CodeBlockComponent) => (_a) => {
  var _b = _a, { children } = _b, restProps = __objRest(_b, ["children"]);
  const pre = /* @__PURE__ */ jsx24(PreComponent, __spreadProps(__spreadValues({}, restProps), { children }));
  if (Children.count(children) !== 1)
    return pre;
  const child = children[0];
  if (child.type !== CodeInlineComponent)
    return pre;
  if (!isValidElementType(CodeBlockComponent))
    return pre;
  const _a2 = child.props, {
    children: [rawCode]
  } = _a2, restChildProps = __objRest(_a2, [
    "children"
  ]);
  return /* @__PURE__ */ jsx24(CodeBlockComponent, __spreadProps(__spreadValues(__spreadValues({}, restProps), restChildProps), { children: rawCode }));
};
var MarkdownCodePane = (_a) => {
  var _b = _a, {
    className,
    children
  } = _b, rest = __objRest(_b, [
    "className",
    "children"
  ]);
  const language = useMemo5(() => {
    const match = /^language-(.*)$/.exec(className || "");
    return match ? match[1] : void 0;
  }, [className]);
  return /* @__PURE__ */ jsx24(code_pane_default, __spreadProps(__spreadValues({}, rest), { language, children }));
};

// src/components/logo.tsx
import { jsx as jsx25, jsxs as jsxs15 } from "react/jsx-runtime";
function SpectacleLogo({ size = 100 }) {
  return /* @__PURE__ */ jsx25(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      width: Math.floor(size * 1.012),
      height: size,
      fillRule: "evenodd",
      clipRule: "evenodd",
      viewBox: "0 0 510 500",
      children: /* @__PURE__ */ jsx25("g", { transform: "translate(.56 -8.403)", children: /* @__PURE__ */ jsx25("g", { children: /* @__PURE__ */ jsx25("g", { children: /* @__PURE__ */ jsxs15("g", { children: [
        /* @__PURE__ */ jsx25(
          "path",
          {
            fill: "#202020",
            fillRule: "nonzero",
            d: "M288.107 16.303l164.681 73.248c31.558 14.036 51.893 45.336 51.893 79.874v178.119c0 34.538-20.335 65.839-51.893 79.875l-164.681 73.247a87.415 87.415 0 01-71.054 0L52.371 427.419C20.814 413.383.479 382.082.479 347.544V169.425c0-34.538 20.335-65.838 51.892-79.874l164.682-73.248a87.423 87.423 0 0171.054 0z"
          }
        ),
        /* @__PURE__ */ jsx25(
          "path",
          {
            fill: "none",
            fillRule: "nonzero",
            stroke: "#FC6986",
            strokeOpacity: "0.5",
            strokeWidth: "24",
            d: "M279.696 44.792a67.128 67.128 0 00-54.404 0L64.664 115.996a57.732 57.732 0 00-34.335 52.778v179.582a57.732 57.732 0 0034.335 52.777l160.628 71.205a67.128 67.128 0 0054.404 0l160.629-71.205a57.732 57.732 0 0034.335-52.777V168.774a57.732 57.732 0 00-34.335-52.778L279.696 44.792z"
          }
        ),
        /* @__PURE__ */ jsx25(
          "path",
          {
            fill: "none",
            fillRule: "nonzero",
            stroke: "#FC6986",
            strokeWidth: "24",
            d: "M284.007 25.519a77.337 77.337 0 00-62.855 0L56.471 98.767c-27.917 12.417-45.905 40.105-45.905 70.658v178.119c0 30.553 17.988 58.242 45.905 70.658l164.681 73.248a77.33 77.33 0 0062.855 0l164.682-73.248c27.916-12.416 45.905-40.105 45.905-70.658V169.425c0-30.553-17.989-58.241-45.905-70.658L284.007 25.519z"
          }
        ),
        /* @__PURE__ */ jsx25("g", { transform: "translate(109.244 121.849)", children: /* @__PURE__ */ jsxs15("g", { fillRule: "nonzero", children: [
          /* @__PURE__ */ jsx25(
            "path",
            {
              fill: "#F14E74",
              d: "M133.25 181.944L42.592 93.853c-11.098-10.782-9.804-29.022 2.703-38.114 12.508-9.092 30.154-4.622 36.876 9.342l54.914 114.075c1.17 2.43-1.904 4.664-3.835 2.788"
            }
          ),
          /* @__PURE__ */ jsx25(
            "path",
            {
              fill: "#FC6986",
              d: "M137.08 179.135L82.067 65.108c-6.734-13.958.719-30.64 15.574-34.86 14.855-4.221 29.898 6.07 31.435 21.504l12.56 126.089c.268 2.686-3.384 3.723-4.556 1.294"
            }
          ),
          /* @__PURE__ */ jsx25(
            "path",
            {
              fill: "#E13E65",
              d: "M130.542 185.845L15.243 134.5C1.13 128.215-3.905 110.643 4.722 97.78c8.627-12.863 26.726-14.77 37.822-3.986l90.644 88.106c1.931 1.876-.19 5.038-2.646 3.945"
            }
          ),
          /* @__PURE__ */ jsx25(
            "path",
            {
              fill: "#FC6986",
              d: "M3.845 99.275c.618-1.267 5.452-10.3 18.702-12.521 6.012-1.007 14.627.963 21.824 8.901l83.456 80.96.601 3.485-82.297-64.701s-13.082-10.252-28.044-.644l-.035-.039a10.58 10.58 0 01-5.6 1.607c-5.895 0-10.674-4.802-10.674-10.724 0-2.368.773-4.55 2.067-6.324"
            }
          ),
          /* @__PURE__ */ jsx25(
            "path",
            {
              fill: "#FF92AC",
              d: "M43.711 56.892c1.011-.979 8.623-7.812 21.832-5.356 5.993 1.113 13.421 5.921 17.491 15.85l50.913 105.166-.618 3.482-55.347-89.486s-8.814-14.123-26.141-10.222l-.021-.048a10.57 10.57 0 01-5.809-.409c-5.541-2.022-8.402-8.174-6.391-13.741a10.656 10.656 0 014.091-5.236"
            }
          ),
          /* @__PURE__ */ jsx25(
            "path",
            {
              fill: "#FF92AC",
              d: "M95.897 30.914c1.284-.57 10.773-4.353 22.333 2.523 5.245 3.118 10.572 10.2 10.991 20.93l11.774 116.349-1.774 3.055-21.307-103.16s-3.438-16.308-21.042-18.639l-.003-.052a10.585 10.585 0 01-5.314-2.394c-4.509-3.814-5.088-10.579-1.292-15.111a10.602 10.602 0 015.634-3.501"
            }
          ),
          /* @__PURE__ */ jsx25(
            "path",
            {
              fill: "#FF92AC",
              d: "M127.602 45.338l-.858 111.944s3.407 25.113 7.651 30.279l-19.887-8.833c-7.512-6.39-5.54-20.646-5.54-20.646l18.634-112.744z"
            }
          ),
          /* @__PURE__ */ jsx25(
            "path",
            {
              fill: "#E13E65",
              d: "M142.425 188.83c-14.822 0-26.839-12.074-26.839-26.967l15.609-151.132C131.793 4.95 136.64.558 142.425.558c5.784 0 10.633 4.392 11.23 10.173l15.609 151.132c0 14.893-12.017 26.967-26.839 26.967"
            }
          ),
          /* @__PURE__ */ jsx25(
            "path",
            {
              fill: "#FF92AC",
              d: "M134.618 26.354l7.82 13.852 7.86-13.675"
            }
          ),
          /* @__PURE__ */ jsx25(
            "path",
            {
              fill: "#FC6986",
              d: "M153.642 11.828c0 6.225-2.366 20.199-11.217 20.199-8.48 0-11.217-13.974-11.217-20.199 0-6.224 5.022-11.27 11.217-11.27s11.217 5.046 11.217 11.27"
            }
          ),
          /* @__PURE__ */ jsx25(
            "path",
            {
              fill: "#FC6986",
              d: "M187.696 30.247c-12.972-3.685-26.086 3.696-30.226 15.904l13.929 85.017 31.87-66.06c6.735-13.958-.718-30.64-15.573-34.861"
            }
          ),
          /* @__PURE__ */ jsx25(
            "path",
            {
              fill: "#FC6986",
              d: "M142.935 169.288c-.921-.115-15.057-2.168-14.712-18.819l3.016-74.905a96.49 96.49 0 00-3.628-30.379l-12.033 116.693a6.241 6.241 0 00.063 1.71c.31 4.212 2.129 15.211 12.538 21.257 3.52 2.044 8.117 3.929 13.779 3.977l.001-.022c.09.003.177.013.267.013 5.376 0 9.734-4.378 9.734-9.78 0-5.162-3.981-9.379-9.025-9.745"
            }
          ),
          /* @__PURE__ */ jsx25(
            "path",
            {
              fill: "#FF92AC",
              d: "M118.843 75.078s1.897 11.598-.237 24.627l2.134-6.673 2.056-15.888-3.953-2.066z"
            }
          ),
          /* @__PURE__ */ jsx25(
            "path",
            {
              fill: "#FF92AC",
              d: "M195.075 34.415a10.608 10.608 0 00-5.635-3.501c-1.284-.569-10.773-4.352-22.333 2.522-3.792 2.256-7.618 6.594-9.61 12.876l6.61 40.352 3.316-16.053s3.438-16.308 21.042-18.638l.003-.053a10.585 10.585 0 005.314-2.394c4.51-3.814 5.089-10.58 1.293-15.111"
            }
          ),
          /* @__PURE__ */ jsx25(
            "path",
            {
              fill: "#F14E74",
              d: "M240.042 55.739c-12.507-9.092-30.154-4.622-36.875 9.342l-31.78 66.016 4.477 27.326s.02.132.049.371l66.833-64.94c11.097-10.783 9.803-29.023-2.704-38.115"
            }
          ),
          /* @__PURE__ */ jsx25(
            "path",
            {
              fill: "#FF92AC",
              d: "M245.717 62.127a10.66 10.66 0 00-4.09-5.235c-1.012-.979-8.624-7.813-21.833-5.356-5.993 1.114-13.421 5.921-17.49 15.85l-30.899 63.823 1.744 10.644 34.206-55.305s8.814-14.123 26.141-10.222l.021-.049c1.875.394 3.876.297 5.809-.409 5.542-2.021 8.403-8.173 6.391-13.741"
            }
          ),
          /* @__PURE__ */ jsx25(
            "path",
            {
              fill: "#E13E65",
              d: "M280.615 97.78v-.001c-8.627-12.862-26.726-14.769-37.822-3.985l-66.879 65.007c.272 2.27 1.352 14.257-5.394 20.041l99.574-44.342c14.114-6.285 19.148-23.857 10.521-36.72"
            }
          ),
          /* @__PURE__ */ jsx25(
            "path",
            {
              fill: "#FC6986",
              d: "M281.493 99.275c-.619-1.267-5.453-10.3-18.703-12.521-6.012-1.008-14.627.963-21.823 8.902l-65.055 63.132c.107.889.342 3.316.168 6.283l63.126-49.672s13.082-10.253 28.044-.644l.035-.039a10.571 10.571 0 005.601 1.607c5.894 0 10.673-4.802 10.673-10.724a10.7 10.7 0 00-2.066-6.324"
            }
          )
        ] }) }),
        /* @__PURE__ */ jsx25("g", { transform: "translate(111.013 374.877)", children: /* @__PURE__ */ jsxs15("g", { children: [
          /* @__PURE__ */ jsx25(
            "path",
            {
              fill: "#FC6986",
              fillRule: "nonzero",
              d: "M.048-.166c-.007.004-.011.009-.011.015 0 .005.001.007.004.013A.293.293 0 00.308.01c.138 0 .237-.091.237-.209 0-.121-.067-.179-.208-.222-.089-.027-.13-.055-.13-.1 0-.045.045-.067.088-.067.059 0 .094.027.123.069a.02.02 0 00.017.009c.005 0 .009-.002.014-.006l.07-.058c.006-.005.008-.009.008-.013S.525-.595.521-.6a.26.26 0 00-.223-.11c-.132 0-.226.076-.226.195 0 .113.094.177.188.205.104.031.147.063.147.117 0 .051-.042.081-.096.081-.06 0-.113-.027-.152-.099C.154-.22.151-.222.144-.222a.024.024 0 00-.014.005l-.082.051z",
              transform: "scale(52)"
            }
          ),
          /* @__PURE__ */ jsx25(
            "path",
            {
              fill: "#FC6986",
              fillRule: "nonzero",
              d: "M.082-.02c0 .014.006.02.02.02h.09c.014 0 .02-.006.02-.02v-.246h.17c.146 0 .22-.096.22-.214C.602-.603.528-.7.371-.7H.102c-.014 0-.02.006-.02.02v.66zm.13-.368v-.19h.145c.078 0 .115.032.115.095s-.037.095-.115.095H.212z",
              transform: "matrix(52 0 0 52 29.224 0)"
            }
          ),
          /* @__PURE__ */ jsx25(
            "path",
            {
              fill: "#FC6986",
              fillRule: "nonzero",
              d: "M.082-.02c0 .014.006.02.02.02h.457c.014 0 .02-.006.02-.02v-.082c0-.014-.006-.02-.02-.02H.212v-.185h.267c.014 0 .02-.006.02-.02v-.082c0-.014-.006-.02-.02-.02H.212v-.149h.335c.013 0 .018-.005.018-.018V-.68c0-.014-.006-.02-.02-.02H.102c-.014 0-.02.006-.02.02v.66z",
              transform: "matrix(52 0 0 52 61.62 0)"
            }
          ),
          /* @__PURE__ */ jsx25(
            "path",
            {
              fill: "#FC6986",
              fillRule: "nonzero",
              d: "M.602-.186C.597-.193.593-.196.587-.196a.024.024 0 00-.017.008c-.042.037-.086.076-.173.076-.102 0-.215-.069-.215-.238 0-.169.116-.238.22-.238a.24.24 0 01.164.068c.005.004.009.006.013.006.006 0 .009-.003.015-.01l.054-.07C.652-.6.654-.603.654-.608c0-.006-.004-.011-.01-.016A.36.36 0 00.4-.71a.342.342 0 00-.356.36c0 .237.161.36.348.36a.35.35 0 00.259-.098C.657-.093.66-.098.66-.104.66-.109.658-.113.653-.12L.602-.186z",
              transform: "matrix(52 0 0 52 91.936 0)"
            }
          ),
          /* @__PURE__ */ jsx25(
            "path",
            {
              fill: "#FC6986",
              fillRule: "nonzero",
              d: "M.238-.02c0 .014.006.02.02.02h.09c.014 0 .02-.006.02-.02v-.558h.19c.014 0 .02-.006.02-.02V-.68c0-.014-.006-.02-.02-.02h-.51c-.014 0-.02.006-.02.02v.082c0 .014.006.02.02.02h.19v.558z",
              transform: "matrix(52 0 0 52 128.076 0)"
            }
          ),
          /* @__PURE__ */ jsx25(
            "path",
            {
              fill: "#FC6986",
              fillRule: "nonzero",
              d: "M.505-.02C.51-.007.517 0 .531 0H.63c.014 0 .02-.006.02-.02L.394-.68C.389-.693.383-.7.369-.7h-.08c-.014 0-.02.007-.025.02l-.256.66c0 .014.006.02.02.02h.099c.014 0 .021-.007.026-.02L.21-.178h.237l.058.158zM.329-.504L.403-.3H.255l.074-.204z",
              transform: "matrix(52 0 0 52 154.076 0)"
            }
          ),
          /* @__PURE__ */ jsx25(
            "path",
            {
              fill: "#FC6986",
              fillRule: "nonzero",
              d: "M.602-.186C.597-.193.593-.196.587-.196a.024.024 0 00-.017.008c-.042.037-.086.076-.173.076-.102 0-.215-.069-.215-.238 0-.169.116-.238.22-.238a.24.24 0 01.164.068c.005.004.009.006.013.006.006 0 .009-.003.015-.01l.054-.07C.652-.6.654-.603.654-.608c0-.006-.004-.011-.01-.016A.36.36 0 00.4-.71a.342.342 0 00-.356.36c0 .237.161.36.348.36a.35.35 0 00.259-.098C.657-.093.66-.098.66-.104.66-.109.658-.113.653-.12L.602-.186z",
              transform: "matrix(52 0 0 52 186.212 0)"
            }
          ),
          /* @__PURE__ */ jsx25(
            "path",
            {
              fill: "#FC6986",
              fillRule: "nonzero",
              d: "M.082-.02c0 .014.006.02.02.02h.445c.014 0 .02-.006.02-.02v-.082c0-.014-.006-.02-.02-.02H.212V-.68c0-.014-.006-.02-.02-.02h-.09c-.014 0-.02.006-.02.02v.66z",
              transform: "matrix(52 0 0 52 220.74 0)"
            }
          ),
          /* @__PURE__ */ jsx25(
            "path",
            {
              fill: "#FC6986",
              fillRule: "nonzero",
              d: "M.082-.02c0 .014.006.02.02.02h.457c.014 0 .02-.006.02-.02v-.082c0-.014-.006-.02-.02-.02H.212v-.185h.267c.014 0 .02-.006.02-.02v-.082c0-.014-.006-.02-.02-.02H.212v-.149h.335c.013 0 .018-.005.018-.018V-.68c0-.014-.006-.02-.02-.02H.102c-.014 0-.02.006-.02.02v.66z",
              transform: "matrix(52 0 0 52 250.9 0)"
            }
          )
        ] }) })
      ] }) }) }) })
    }
  );
}

// src/utils/notes.ts
var NOTES_MARKER = "Notes: ";
var NOTES_REG = new RegExp(`^${NOTES_MARKER}`, "m");
var isolateNotes = (content) => {
  const indexOfNotes = content.search(NOTES_REG);
  if (indexOfNotes >= 0) {
    return content.substring(indexOfNotes + NOTES_MARKER.length);
  }
  return "";
};
var removeNotes = (content) => {
  const indexOfNotes = content.search(NOTES_REG);
  if (indexOfNotes >= 0) {
    return content.substring(0, indexOfNotes);
  }
  return content;
};
export {
  animated_progress_default as AnimatedProgress,
  Appear,
  Box,
  code_pane_default as CodePane,
  CodeSpan,
  command_bar_default as CommandBar,
  deck_default as Deck,
  DeckContext,
  DefaultTemplate,
  FlexBox,
  fullscreen_default as FullScreen,
  FullSizeImage,
  Grid,
  Heading,
  Image,
  Link,
  ListItem,
  Markdown,
  MarkdownPreHelper,
  MarkdownSlide,
  MarkdownSlideSet,
  notes_default as Notes,
  OrderedList,
  progress_default as Progress,
  Quote,
  slide_default as Slide,
  SlideContext,
  slide_layout_default as SlideLayout,
  SpectacleLogo,
  Stepper,
  Table,
  TableBody,
  TableCell,
  TableHeader,
  TableRow,
  Text,
  UnorderedList,
  codePaneThemes,
  default_theme_default as defaultTheme,
  defaultTransition,
  fadeTransition,
  indent_normalizer_default as indentNormalizer,
  isolateNotes,
  mdx_component_mapper_default as mdxComponentMap,
  removeNotes,
  slideTransition,
  useMousetrap,
  useSteps
};
//# sourceMappingURL=index.mjs.map